{"version":3,"sources":["meteor://ðŸ’»app/server/config.js"],"names":[],"mappings":";;;;;;;;;AACA,QAAQ,GAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;;AAEvB,IAAI,OAAO,QAAQ,IAAI,WAAW,EAAE;AAClC,WAAS,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,YAAY,CAAE,OAAO,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAE,CAAC;;AAE7E,WAAS,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,WAAS,GAAG,SAAS,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;CACpD,MAAI;AACH,WAAS,GAAC,QAAQ,CAAC;CACpB;AACH,MAAM,CAAC,GAAG,CAAC,YAAW;AAClB,MAAI,CAAC,KAAK,CAAC,YAAY,EAAE;AACrB,SAAK,EAAE,QAAQ;AACf,QAAI,EAAE,mBAAmB;AACzB,UAAM,EAAE,YAAW;AAChB,UAAI,QAAQ,GAAI,SAAS,GAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;;AAEvD,UAAG;AACA,YAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACrC,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;AACvB,wBAAc,EAAE,OAAO;SAC3B,CAAC,CAAC;AACH,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1B,YAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;OAEvB,QAAM,CAAC,EAAC;AACN,YAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,EAE3B,CAAC,CAAC;AACH,YAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;OAEvB;KAEC;GACJ,CAAC,CAAC;CACN,CAAC,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC;AACb,SAAO,EAAE,YAAU;AAClB,YAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC;AACrD,WAAO,QAAQ,CAAC;GAChB;AACD,UAAQ,EAAE,YAAU;AACnB,QAAI,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,YAAY,CAAE,OAAO,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAE,CAAC;AACjF,aAAS,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,WAAO,GAAG,SAAS,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;AACjD,WAAO,OAAO,CAAC;GACf;CACF,CAAC,CAAC;AACJ,MAAM,CAAC,KAAK,CAAC;AACX,UAAQ,EAAE,YAAY;;AAEpB,WAAO,IAAI,CAAC;GACb;CACF,CAAC,CAAC,sE","file":"/server/config.js","sourcesContent":["\r\nfullpath=process.env.PWD;\r\n  //console.log('linux path:'+fullpath);\r\n  if( typeof fullpath == 'undefined' ){\r\n    base_path = Meteor.npmRequire('fs').realpathSync( process.cwd() + '../../' );\r\n    //console.log('window path:'+base_path);\r\n    base_path = base_path.split('\\\\').join('/');\r\n    base_path = base_path.replace(/\\/\\.meteor.*$/, '');\r\n  }else{\r\n    base_path=fullpath;\r\n  }\r\nRouter.map(function() {\r\n    this.route('serverFile', {\r\n        where: 'server',\r\n        path: /^\\/uploads\\/(.*)$/,\r\n        action: function() {\r\n           var filePath =  base_path+'/upload/' + this.params;\r\n       //console.log('path:'+filePath);\r\n       try{\r\n          var data = fs.readFileSync(filePath);\r\n          this.response.writeHead(200, {\r\n                'Content-Type': 'image'\r\n           });\r\n           this.response.write(data);\r\n           this.response.end();\r\n           \r\n       }catch(e){\r\n          this.response.writeHead(404, {\r\n                \r\n           });\r\n           this.response.end();\r\n           \r\n       }\r\n           \r\n        }\r\n    });\r\n});\r\n\r\n Meteor.methods({\r\n   baseUrl: function(){\r\n    basePath = Meteor.absoluteUrl.defaultOptions.rootUrl;\r\n    return basePath;\r\n   },\r\n   basePath: function(){\r\n    var base_path = Meteor.npmRequire('fs').realpathSync( process.cwd() + '../../' );\r\n    base_path = base_path.split('\\\\').join('/');\r\n    baseDir = base_path.replace(/\\/\\.meteor.*$/, '');\r\n    return baseDir;\r\n   },\r\n });\r\nimages.allow({\r\n  'insert': function () {\r\n    // add custom authentication code here\r\n    return true;\r\n  }\r\n});\r\n"]}
{"version":3,"sources":["meteor://ðŸ’»app/packages/momentjs_moment/packages/momentjs_moment.js"],"names":[],"mappingsfile":"/packages/momentjs_moment.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/moment.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//! moment.js                                                                                                          // 1\n//! version : 2.8.4                                                                                                    // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                         // 3\n//! license : MIT                                                                                                      // 4\n//! momentjs.com                                                                                                       // 5\n                                                                                                                       // 6\n(function (undefined) {                                                                                                // 7\n    /************************************                                                                              // 8\n        Constants                                                                                                      // 9\n    ************************************/                                                                              // 10\n                                                                                                                       // 11\n    var moment,                                                                                                        // 12\n        VERSION = '2.8.4',                                                                                             // 13\n        // the global-scope this is NOT the global object in Node.js                                                   // 14\n        globalScope = typeof global !== 'undefined' ? global : this,                                                   // 15\n        oldGlobalMoment,                                                                                               // 16\n        round = Math.round,                                                                                            // 17\n        hasOwnProperty = Object.prototype.hasOwnProperty,                                                              // 18\n        i,                                                                                                             // 19\n                                                                                                                       // 20\n        YEAR = 0,                                                                                                      // 21\n        MONTH = 1,                                                                                                     // 22\n        DATE = 2,                                                                                                      // 23\n        HOUR = 3,                                                                                                      // 24\n        MINUTE = 4,                                                                                                    // 25\n        SECOND = 5,                                                                                                    // 26\n        MILLISECOND = 6,                                                                                               // 27\n                                                                                                                       // 28\n        // internal storage for locale config files                                                                    // 29\n        locales = {},                                                                                                  // 30\n                                                                                                                       // 31\n        // extra moment internal properties (plugins register props here)                                              // 32\n        momentProperties = [],                                                                                         // 33\n                                                                                                                       // 34\n        // check for nodeJS                                                                                            // 35\n        hasModule = (typeof module !== 'undefined' && module && module.exports),                                       // 36\n                                                                                                                       // 37\n        // ASP.NET json date format regex                                                                              // 38\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,                                                                       // 39\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,                              // 40\n                                                                                                                       // 41\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                   // 42\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                   // 43\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n                                                                                                                       // 45\n        // format tokens                                                                                               // 46\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,                                          // 48\n                                                                                                                       // 49\n        // parsing token regexes                                                                                       // 50\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99                                                                  // 51\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999                                                             // 52\n        parseTokenOneToFourDigits = /\\d{1,4}/, // 0 - 9999                                                             // 53\n        parseTokenOneToSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999                                              // 54\n        parseTokenDigits = /\\d+/, // nonzero number of digits                                                          // 55\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z                                 // 57\n        parseTokenT = /T/i, // T (ISO separator)                                                                       // 58\n        parseTokenOffsetMs = /[\\+\\-]?\\d+/, // 1234567890123                                                            // 59\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123                                   // 60\n                                                                                                                       // 61\n        //strict parsing regexes                                                                                       // 62\n        parseTokenOneDigit = /\\d/, // 0 - 9                                                                            // 63\n        parseTokenTwoDigits = /\\d\\d/, // 00 - 99                                                                       // 64\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999                                                                  // 65\n        parseTokenFourDigits = /\\d{4}/, // 0000 - 9999                                                                 // 66\n        parseTokenSixDigits = /[+-]?\\d{6}/, // -999,999 - 999,999                                                      // 67\n        parseTokenSignedNumber = /[+-]?\\d+/, // -inf - inf                                                             // 68\n                                                                                                                       // 69\n        // iso 8601 regex                                                                                              // 70\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)   // 71\n        isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n                                                                                                                       // 73\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',                                                                            // 74\n                                                                                                                       // 75\n        isoDates = [                                                                                                   // 76\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],                                                                 // 77\n            ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],                                                                       // 78\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],                                                                       // 79\n            ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],                                                                            // 80\n            ['YYYY-DDD', /\\d{4}-\\d{3}/]                                                                                // 81\n        ],                                                                                                             // 82\n                                                                                                                       // 83\n        // iso time formats and regexes                                                                                // 84\n        isoTimes = [                                                                                                   // 85\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                             // 86\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],                                                                       // 87\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],                                                                               // 88\n            ['HH', /(T| )\\d\\d/]                                                                                        // 89\n        ],                                                                                                             // 90\n                                                                                                                       // 91\n        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-15', '30']                                         // 92\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,                                                                      // 93\n                                                                                                                       // 94\n        // getter and setter names                                                                                     // 95\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),                                 // 96\n        unitMillisecondFactors = {                                                                                     // 97\n            'Milliseconds' : 1,                                                                                        // 98\n            'Seconds' : 1e3,                                                                                           // 99\n            'Minutes' : 6e4,                                                                                           // 100\n            'Hours' : 36e5,                                                                                            // 101\n            'Days' : 864e5,                                                                                            // 102\n            'Months' : 2592e6,                                                                                         // 103\n            'Years' : 31536e6                                                                                          // 104\n        },                                                                                                             // 105\n                                                                                                                       // 106\n        unitAliases = {                                                                                                // 107\n            ms : 'millisecond',                                                                                        // 108\n            s : 'second',                                                                                              // 109\n            m : 'minute',                                                                                              // 110\n            h : 'hour',                                                                                                // 111\n            d : 'day',                                                                                                 // 112\n            D : 'date',                                                                                                // 113\n            w : 'week',                                                                                                // 114\n            W : 'isoWeek',                                                                                             // 115\n            M : 'month',                                                                                               // 116\n            Q : 'quarter',                                                                                             // 117\n            y : 'year',                                                                                                // 118\n            DDD : 'dayOfYear',                                                                                         // 119\n            e : 'weekday',                                                                                             // 120\n            E : 'isoWeekday',                                                                                          // 121\n            gg: 'weekYear',                                                                                            // 122\n            GG: 'isoWeekYear'                                                                                          // 123\n        },                                                                                                             // 124\n                                                                                                                       // 125\n        camelFunctions = {                                                                                             // 126\n            dayofyear : 'dayOfYear',                                                                                   // 127\n            isoweekday : 'isoWeekday',                                                                                 // 128\n            isoweek : 'isoWeek',                                                                                       // 129\n            weekyear : 'weekYear',                                                                                     // 130\n            isoweekyear : 'isoWeekYear'                                                                                // 131\n        },                                                                                                             // 132\n                                                                                                                       // 133\n        // format function strings                                                                                     // 134\n        formatFunctions = {},                                                                                          // 135\n                                                                                                                       // 136\n        // default relative time thresholds                                                                            // 137\n        relativeTimeThresholds = {                                                                                     // 138\n            s: 45,  // seconds to minute                                                                               // 139\n            m: 45,  // minutes to hour                                                                                 // 140\n            h: 22,  // hours to day                                                                                    // 141\n            d: 26,  // days to month                                                                                   // 142\n            M: 11   // months to year                                                                                  // 143\n        },                                                                                                             // 144\n                                                                                                                       // 145\n        // tokens to ordinalize and pad                                                                                // 146\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),                                                                 // 147\n        paddedTokens = 'M D H h m s w W'.split(' '),                                                                   // 148\n                                                                                                                       // 149\n        formatTokenFunctions = {                                                                                       // 150\n            M    : function () {                                                                                       // 151\n                return this.month() + 1;                                                                               // 152\n            },                                                                                                         // 153\n            MMM  : function (format) {                                                                                 // 154\n                return this.localeData().monthsShort(this, format);                                                    // 155\n            },                                                                                                         // 156\n            MMMM : function (format) {                                                                                 // 157\n                return this.localeData().months(this, format);                                                         // 158\n            },                                                                                                         // 159\n            D    : function () {                                                                                       // 160\n                return this.date();                                                                                    // 161\n            },                                                                                                         // 162\n            DDD  : function () {                                                                                       // 163\n                return this.dayOfYear();                                                                               // 164\n            },                                                                                                         // 165\n            d    : function () {                                                                                       // 166\n                return this.day();                                                                                     // 167\n            },                                                                                                         // 168\n            dd   : function (format) {                                                                                 // 169\n                return this.localeData().weekdaysMin(this, format);                                                    // 170\n            },                                                                                                         // 171\n            ddd  : function (format) {                                                                                 // 172\n                return this.localeData().weekdaysShort(this, format);                                                  // 173\n            },                                                                                                         // 174\n            dddd : function (format) {                                                                                 // 175\n                return this.localeData().weekdays(this, format);                                                       // 176\n            },                                                                                                         // 177\n            w    : function () {                                                                                       // 178\n                return this.week();                                                                                    // 179\n            },                                                                                                         // 180\n            W    : function () {                                                                                       // 181\n                return this.isoWeek();                                                                                 // 182\n            },                                                                                                         // 183\n            YY   : function () {                                                                                       // 184\n                return leftZeroFill(this.year() % 100, 2);                                                             // 185\n            },                                                                                                         // 186\n            YYYY : function () {                                                                                       // 187\n                return leftZeroFill(this.year(), 4);                                                                   // 188\n            },                                                                                                         // 189\n            YYYYY : function () {                                                                                      // 190\n                return leftZeroFill(this.year(), 5);                                                                   // 191\n            },                                                                                                         // 192\n            YYYYYY : function () {                                                                                     // 193\n                var y = this.year(), sign = y >= 0 ? '+' : '-';                                                        // 194\n                return sign + leftZeroFill(Math.abs(y), 6);                                                            // 195\n            },                                                                                                         // 196\n            gg   : function () {                                                                                       // 197\n                return leftZeroFill(this.weekYear() % 100, 2);                                                         // 198\n            },                                                                                                         // 199\n            gggg : function () {                                                                                       // 200\n                return leftZeroFill(this.weekYear(), 4);                                                               // 201\n            },                                                                                                         // 202\n            ggggg : function () {                                                                                      // 203\n                return leftZeroFill(this.weekYear(), 5);                                                               // 204\n            },                                                                                                         // 205\n            GG   : function () {                                                                                       // 206\n                return leftZeroFill(this.isoWeekYear() % 100, 2);                                                      // 207\n            },                                                                                                         // 208\n            GGGG : function () {                                                                                       // 209\n                return leftZeroFill(this.isoWeekYear(), 4);                                                            // 210\n            },                                                                                                         // 211\n            GGGGG : function () {                                                                                      // 212\n                return leftZeroFill(this.isoWeekYear(), 5);                                                            // 213\n            },                                                                                                         // 214\n            e : function () {                                                                                          // 215\n                return this.weekday();                                                                                 // 216\n            },                                                                                                         // 217\n            E : function () {                                                                                          // 218\n                return this.isoWeekday();                                                                              // 219\n            },                                                                                                         // 220\n            a    : function () {                                                                                       // 221\n                return this.localeData().meridiem(this.hours(), this.minutes(), true);                                 // 222\n            },                                                                                                         // 223\n            A    : function () {                                                                                       // 224\n                return this.localeData().meridiem(this.hours(), this.minutes(), false);                                // 225\n            },                                                                                                         // 226\n            H    : function () {                                                                                       // 227\n                return this.hours();                                                                                   // 228\n            },                                                                                                         // 229\n            h    : function () {                                                                                       // 230\n                return this.hours() % 12 || 12;                                                                        // 231\n            },                                                                                                         // 232\n            m    : function () {                                                                                       // 233\n                return this.minutes();                                                                                 // 234\n            },                                                                                                         // 235\n            s    : function () {                                                                                       // 236\n                return this.seconds();                                                                                 // 237\n            },                                                                                                         // 238\n            S    : function () {                                                                                       // 239\n                return toInt(this.milliseconds() / 100);                                                               // 240\n            },                                                                                                         // 241\n            SS   : function () {                                                                                       // 242\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);                                               // 243\n            },                                                                                                         // 244\n            SSS  : function () {                                                                                       // 245\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 246\n            },                                                                                                         // 247\n            SSSS : function () {                                                                                       // 248\n                return leftZeroFill(this.milliseconds(), 3);                                                           // 249\n            },                                                                                                         // 250\n            Z    : function () {                                                                                       // 251\n                var a = -this.zone(),                                                                                  // 252\n                    b = '+';                                                                                           // 253\n                if (a < 0) {                                                                                           // 254\n                    a = -a;                                                                                            // 255\n                    b = '-';                                                                                           // 256\n                }                                                                                                      // 257\n                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);                      // 258\n            },                                                                                                         // 259\n            ZZ   : function () {                                                                                       // 260\n                var a = -this.zone(),                                                                                  // 261\n                    b = '+';                                                                                           // 262\n                if (a < 0) {                                                                                           // 263\n                    a = -a;                                                                                            // 264\n                    b = '-';                                                                                           // 265\n                }                                                                                                      // 266\n                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);                            // 267\n            },                                                                                                         // 268\n            z : function () {                                                                                          // 269\n                return this.zoneAbbr();                                                                                // 270\n            },                                                                                                         // 271\n            zz : function () {                                                                                         // 272\n                return this.zoneName();                                                                                // 273\n            },                                                                                                         // 274\n            x    : function () {                                                                                       // 275\n                return this.valueOf();                                                                                 // 276\n            },                                                                                                         // 277\n            X    : function () {                                                                                       // 278\n                return this.unix();                                                                                    // 279\n            },                                                                                                         // 280\n            Q : function () {                                                                                          // 281\n                return this.quarter();                                                                                 // 282\n            }                                                                                                          // 283\n        },                                                                                                             // 284\n                                                                                                                       // 285\n        deprecations = {},                                                                                             // 286\n                                                                                                                       // 287\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];                                 // 288\n                                                                                                                       // 289\n    // Pick the first defined of two or three arguments. dfl comes from                                                // 290\n    // default.                                                                                                        // 291\n    function dfl(a, b, c) {                                                                                            // 292\n        switch (arguments.length) {                                                                                    // 293\n            case 2: return a != null ? a : b;                                                                          // 294\n            case 3: return a != null ? a : b != null ? b : c;                                                          // 295\n            default: throw new Error('Implement me');                                                                  // 296\n        }                                                                                                              // 297\n    }                                                                                                                  // 298\n                                                                                                                       // 299\n    function hasOwnProp(a, b) {                                                                                        // 300\n        return hasOwnProperty.call(a, b);                                                                              // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    function defaultParsingFlags() {                                                                                   // 304\n        // We need to deep clone this object, and es5 standard is not very                                             // 305\n        // helpful.                                                                                                    // 306\n        return {                                                                                                       // 307\n            empty : false,                                                                                             // 308\n            unusedTokens : [],                                                                                         // 309\n            unusedInput : [],                                                                                          // 310\n            overflow : -2,                                                                                             // 311\n            charsLeftOver : 0,                                                                                         // 312\n            nullInput : false,                                                                                         // 313\n            invalidMonth : null,                                                                                       // 314\n            invalidFormat : false,                                                                                     // 315\n            userInvalidated : false,                                                                                   // 316\n            iso: false                                                                                                 // 317\n        };                                                                                                             // 318\n    }                                                                                                                  // 319\n                                                                                                                       // 320\n    function printMsg(msg) {                                                                                           // 321\n        if (moment.suppressDeprecationWarnings === false &&                                                            // 322\n                typeof console !== 'undefined' && console.warn) {                                                      // 323\n            console.warn('Deprecation warning: ' + msg);                                                               // 324\n        }                                                                                                              // 325\n    }                                                                                                                  // 326\n                                                                                                                       // 327\n    function deprecate(msg, fn) {                                                                                      // 328\n        var firstTime = true;                                                                                          // 329\n        return extend(function () {                                                                                    // 330\n            if (firstTime) {                                                                                           // 331\n                printMsg(msg);                                                                                         // 332\n                firstTime = false;                                                                                     // 333\n            }                                                                                                          // 334\n            return fn.apply(this, arguments);                                                                          // 335\n        }, fn);                                                                                                        // 336\n    }                                                                                                                  // 337\n                                                                                                                       // 338\n    function deprecateSimple(name, msg) {                                                                              // 339\n        if (!deprecations[name]) {                                                                                     // 340\n            printMsg(msg);                                                                                             // 341\n            deprecations[name] = true;                                                                                 // 342\n        }                                                                                                              // 343\n    }                                                                                                                  // 344\n                                                                                                                       // 345\n    function padToken(func, count) {                                                                                   // 346\n        return function (a) {                                                                                          // 347\n            return leftZeroFill(func.call(this, a), count);                                                            // 348\n        };                                                                                                             // 349\n    }                                                                                                                  // 350\n    function ordinalizeToken(func, period) {                                                                           // 351\n        return function (a) {                                                                                          // 352\n            return this.localeData().ordinal(func.call(this, a), period);                                              // 353\n        };                                                                                                             // 354\n    }                                                                                                                  // 355\n                                                                                                                       // 356\n    while (ordinalizeTokens.length) {                                                                                  // 357\n        i = ordinalizeTokens.pop();                                                                                    // 358\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);                                   // 359\n    }                                                                                                                  // 360\n    while (paddedTokens.length) {                                                                                      // 361\n        i = paddedTokens.pop();                                                                                        // 362\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);                                            // 363\n    }                                                                                                                  // 364\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);                                                 // 365\n                                                                                                                       // 366\n                                                                                                                       // 367\n    /************************************                                                                              // 368\n        Constructors                                                                                                   // 369\n    ************************************/                                                                              // 370\n                                                                                                                       // 371\n    function Locale() {                                                                                                // 372\n    }                                                                                                                  // 373\n                                                                                                                       // 374\n    // Moment prototype object                                                                                         // 375\n    function Moment(config, skipOverflow) {                                                                            // 376\n        if (skipOverflow !== false) {                                                                                  // 377\n            checkOverflow(config);                                                                                     // 378\n        }                                                                                                              // 379\n        copyConfig(this, config);                                                                                      // 380\n        this._d = new Date(+config._d);                                                                                // 381\n    }                                                                                                                  // 382\n                                                                                                                       // 383\n    // Duration Constructor                                                                                            // 384\n    function Duration(duration) {                                                                                      // 385\n        var normalizedInput = normalizeObjectUnits(duration),                                                          // 386\n            years = normalizedInput.year || 0,                                                                         // 387\n            quarters = normalizedInput.quarter || 0,                                                                   // 388\n            months = normalizedInput.month || 0,                                                                       // 389\n            weeks = normalizedInput.week || 0,                                                                         // 390\n            days = normalizedInput.day || 0,                                                                           // 391\n            hours = normalizedInput.hour || 0,                                                                         // 392\n            minutes = normalizedInput.minute || 0,                                                                     // 393\n            seconds = normalizedInput.second || 0,                                                                     // 394\n            milliseconds = normalizedInput.millisecond || 0;                                                           // 395\n                                                                                                                       // 396\n        // representation for dateAddRemove                                                                            // 397\n        this._milliseconds = +milliseconds +                                                                           // 398\n            seconds * 1e3 + // 1000                                                                                    // 399\n            minutes * 6e4 + // 1000 * 60                                                                               // 400\n            hours * 36e5; // 1000 * 60 * 60                                                                            // 401\n        // Because of dateAddRemove treats 24 hours as different from a                                                // 402\n        // day when working around DST, we need to store them separately                                               // 403\n        this._days = +days +                                                                                           // 404\n            weeks * 7;                                                                                                 // 405\n        // It is impossible translate months into days without knowing                                                 // 406\n        // which months you are are talking about, so we have to store                                                 // 407\n        // it separately.                                                                                              // 408\n        this._months = +months +                                                                                       // 409\n            quarters * 3 +                                                                                             // 410\n            years * 12;                                                                                                // 411\n                                                                                                                       // 412\n        this._data = {};                                                                                               // 413\n                                                                                                                       // 414\n        this._locale = moment.localeData();                                                                            // 415\n                                                                                                                       // 416\n        this._bubble();                                                                                                // 417\n    }                                                                                                                  // 418\n                                                                                                                       // 419\n    /************************************                                                                              // 420\n        Helpers                                                                                                        // 421\n    ************************************/                                                                              // 422\n                                                                                                                       // 423\n                                                                                                                       // 424\n    function extend(a, b) {                                                                                            // 425\n        for (var i in b) {                                                                                             // 426\n            if (hasOwnProp(b, i)) {                                                                                    // 427\n                a[i] = b[i];                                                                                           // 428\n            }                                                                                                          // 429\n        }                                                                                                              // 430\n                                                                                                                       // 431\n        if (hasOwnProp(b, 'toString')) {                                                                               // 432\n            a.toString = b.toString;                                                                                   // 433\n        }                                                                                                              // 434\n                                                                                                                       // 435\n        if (hasOwnProp(b, 'valueOf')) {                                                                                // 436\n            a.valueOf = b.valueOf;                                                                                     // 437\n        }                                                                                                              // 438\n                                                                                                                       // 439\n        return a;                                                                                                      // 440\n    }                                                                                                                  // 441\n                                                                                                                       // 442\n    function copyConfig(to, from) {                                                                                    // 443\n        var i, prop, val;                                                                                              // 444\n                                                                                                                       // 445\n        if (typeof from._isAMomentObject !== 'undefined') {                                                            // 446\n            to._isAMomentObject = from._isAMomentObject;                                                               // 447\n        }                                                                                                              // 448\n        if (typeof from._i !== 'undefined') {                                                                          // 449\n            to._i = from._i;                                                                                           // 450\n        }                                                                                                              // 451\n        if (typeof from._f !== 'undefined') {                                                                          // 452\n            to._f = from._f;                                                                                           // 453\n        }                                                                                                              // 454\n        if (typeof from._l !== 'undefined') {                                                                          // 455\n            to._l = from._l;                                                                                           // 456\n        }                                                                                                              // 457\n        if (typeof from._strict !== 'undefined') {                                                                     // 458\n            to._strict = from._strict;                                                                                 // 459\n        }                                                                                                              // 460\n        if (typeof from._tzm !== 'undefined') {                                                                        // 461\n            to._tzm = from._tzm;                                                                                       // 462\n        }                                                                                                              // 463\n        if (typeof from._isUTC !== 'undefined') {                                                                      // 464\n            to._isUTC = from._isUTC;                                                                                   // 465\n        }                                                                                                              // 466\n        if (typeof from._offset !== 'undefined') {                                                                     // 467\n            to._offset = from._offset;                                                                                 // 468\n        }                                                                                                              // 469\n        if (typeof from._pf !== 'undefined') {                                                                         // 470\n            to._pf = from._pf;                                                                                         // 471\n        }                                                                                                              // 472\n        if (typeof from._locale !== 'undefined') {                                                                     // 473\n            to._locale = from._locale;                                                                                 // 474\n        }                                                                                                              // 475\n                                                                                                                       // 476\n        if (momentProperties.length > 0) {                                                                             // 477\n            for (i in momentProperties) {                                                                              // 478\n                prop = momentProperties[i];                                                                            // 479\n                val = from[prop];                                                                                      // 480\n                if (typeof val !== 'undefined') {                                                                      // 481\n                    to[prop] = val;                                                                                    // 482\n                }                                                                                                      // 483\n            }                                                                                                          // 484\n        }                                                                                                              // 485\n                                                                                                                       // 486\n        return to;                                                                                                     // 487\n    }                                                                                                                  // 488\n                                                                                                                       // 489\n    function absRound(number) {                                                                                        // 490\n        if (number < 0) {                                                                                              // 491\n            return Math.ceil(number);                                                                                  // 492\n        } else {                                                                                                       // 493\n            return Math.floor(number);                                                                                 // 494\n        }                                                                                                              // 495\n    }                                                                                                                  // 496\n                                                                                                                       // 497\n    // left zero fill a number                                                                                         // 498\n    // see http://jsperf.com/left-zero-filling for performance comparison                                              // 499\n    function leftZeroFill(number, targetLength, forceSign) {                                                           // 500\n        var output = '' + Math.abs(number),                                                                            // 501\n            sign = number >= 0;                                                                                        // 502\n                                                                                                                       // 503\n        while (output.length < targetLength) {                                                                         // 504\n            output = '0' + output;                                                                                     // 505\n        }                                                                                                              // 506\n        return (sign ? (forceSign ? '+' : '') : '-') + output;                                                         // 507\n    }                                                                                                                  // 508\n                                                                                                                       // 509\n    function positiveMomentsDifference(base, other) {                                                                  // 510\n        var res = {milliseconds: 0, months: 0};                                                                        // 511\n                                                                                                                       // 512\n        res.months = other.month() - base.month() +                                                                    // 513\n            (other.year() - base.year()) * 12;                                                                         // 514\n        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 515\n            --res.months;                                                                                              // 516\n        }                                                                                                              // 517\n                                                                                                                       // 518\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 519\n                                                                                                                       // 520\n        return res;                                                                                                    // 521\n    }                                                                                                                  // 522\n                                                                                                                       // 523\n    function momentsDifference(base, other) {                                                                          // 524\n        var res;                                                                                                       // 525\n        other = makeAs(other, base);                                                                                   // 526\n        if (base.isBefore(other)) {                                                                                    // 527\n            res = positiveMomentsDifference(base, other);                                                              // 528\n        } else {                                                                                                       // 529\n            res = positiveMomentsDifference(other, base);                                                              // 530\n            res.milliseconds = -res.milliseconds;                                                                      // 531\n            res.months = -res.months;                                                                                  // 532\n        }                                                                                                              // 533\n                                                                                                                       // 534\n        return res;                                                                                                    // 535\n    }                                                                                                                  // 536\n                                                                                                                       // 537\n    // TODO: remove 'name' arg after deprecation is removed                                                            // 538\n    function createAdder(direction, name) {                                                                            // 539\n        return function (val, period) {                                                                                // 540\n            var dur, tmp;                                                                                              // 541\n            //invert the arguments, but complain about it                                                              // 542\n            if (period !== null && !isNaN(+period)) {                                                                  // 543\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');\n                tmp = val; val = period; period = tmp;                                                                 // 545\n            }                                                                                                          // 546\n                                                                                                                       // 547\n            val = typeof val === 'string' ? +val : val;                                                                // 548\n            dur = moment.duration(val, period);                                                                        // 549\n            addOrSubtractDurationFromMoment(this, dur, direction);                                                     // 550\n            return this;                                                                                               // 551\n        };                                                                                                             // 552\n    }                                                                                                                  // 553\n                                                                                                                       // 554\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {                                  // 555\n        var milliseconds = duration._milliseconds,                                                                     // 556\n            days = duration._days,                                                                                     // 557\n            months = duration._months;                                                                                 // 558\n        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 559\n                                                                                                                       // 560\n        if (milliseconds) {                                                                                            // 561\n            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                         // 562\n        }                                                                                                              // 563\n        if (days) {                                                                                                    // 564\n            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);                                          // 565\n        }                                                                                                              // 566\n        if (months) {                                                                                                  // 567\n            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);                                          // 568\n        }                                                                                                              // 569\n        if (updateOffset) {                                                                                            // 570\n            moment.updateOffset(mom, days || months);                                                                  // 571\n        }                                                                                                              // 572\n    }                                                                                                                  // 573\n                                                                                                                       // 574\n    // check if is an array                                                                                            // 575\n    function isArray(input) {                                                                                          // 576\n        return Object.prototype.toString.call(input) === '[object Array]';                                             // 577\n    }                                                                                                                  // 578\n                                                                                                                       // 579\n    function isDate(input) {                                                                                           // 580\n        return Object.prototype.toString.call(input) === '[object Date]' ||                                            // 581\n            input instanceof Date;                                                                                     // 582\n    }                                                                                                                  // 583\n                                                                                                                       // 584\n    // compare two arrays, return the number of differences                                                            // 585\n    function compareArrays(array1, array2, dontConvert) {                                                              // 586\n        var len = Math.min(array1.length, array2.length),                                                              // 587\n            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 588\n            diffs = 0,                                                                                                 // 589\n            i;                                                                                                         // 590\n        for (i = 0; i < len; i++) {                                                                                    // 591\n            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 592\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 593\n                diffs++;                                                                                               // 594\n            }                                                                                                          // 595\n        }                                                                                                              // 596\n        return diffs + lengthDiff;                                                                                     // 597\n    }                                                                                                                  // 598\n                                                                                                                       // 599\n    function normalizeUnits(units) {                                                                                   // 600\n        if (units) {                                                                                                   // 601\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');                                                  // 602\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;                                          // 603\n        }                                                                                                              // 604\n        return units;                                                                                                  // 605\n    }                                                                                                                  // 606\n                                                                                                                       // 607\n    function normalizeObjectUnits(inputObject) {                                                                       // 608\n        var normalizedInput = {},                                                                                      // 609\n            normalizedProp,                                                                                            // 610\n            prop;                                                                                                      // 611\n                                                                                                                       // 612\n        for (prop in inputObject) {                                                                                    // 613\n            if (hasOwnProp(inputObject, prop)) {                                                                       // 614\n                normalizedProp = normalizeUnits(prop);                                                                 // 615\n                if (normalizedProp) {                                                                                  // 616\n                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 617\n                }                                                                                                      // 618\n            }                                                                                                          // 619\n        }                                                                                                              // 620\n                                                                                                                       // 621\n        return normalizedInput;                                                                                        // 622\n    }                                                                                                                  // 623\n                                                                                                                       // 624\n    function makeList(field) {                                                                                         // 625\n        var count, setter;                                                                                             // 626\n                                                                                                                       // 627\n        if (field.indexOf('week') === 0) {                                                                             // 628\n            count = 7;                                                                                                 // 629\n            setter = 'day';                                                                                            // 630\n        }                                                                                                              // 631\n        else if (field.indexOf('month') === 0) {                                                                       // 632\n            count = 12;                                                                                                // 633\n            setter = 'month';                                                                                          // 634\n        }                                                                                                              // 635\n        else {                                                                                                         // 636\n            return;                                                                                                    // 637\n        }                                                                                                              // 638\n                                                                                                                       // 639\n        moment[field] = function (format, index) {                                                                     // 640\n            var i, getter,                                                                                             // 641\n                method = moment._locale[field],                                                                        // 642\n                results = [];                                                                                          // 643\n                                                                                                                       // 644\n            if (typeof format === 'number') {                                                                          // 645\n                index = format;                                                                                        // 646\n                format = undefined;                                                                                    // 647\n            }                                                                                                          // 648\n                                                                                                                       // 649\n            getter = function (i) {                                                                                    // 650\n                var m = moment().utc().set(setter, i);                                                                 // 651\n                return method.call(moment._locale, m, format || '');                                                   // 652\n            };                                                                                                         // 653\n                                                                                                                       // 654\n            if (index != null) {                                                                                       // 655\n                return getter(index);                                                                                  // 656\n            }                                                                                                          // 657\n            else {                                                                                                     // 658\n                for (i = 0; i < count; i++) {                                                                          // 659\n                    results.push(getter(i));                                                                           // 660\n                }                                                                                                      // 661\n                return results;                                                                                        // 662\n            }                                                                                                          // 663\n        };                                                                                                             // 664\n    }                                                                                                                  // 665\n                                                                                                                       // 666\n    function toInt(argumentForCoercion) {                                                                              // 667\n        var coercedNumber = +argumentForCoercion,                                                                      // 668\n            value = 0;                                                                                                 // 669\n                                                                                                                       // 670\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 671\n            if (coercedNumber >= 0) {                                                                                  // 672\n                value = Math.floor(coercedNumber);                                                                     // 673\n            } else {                                                                                                   // 674\n                value = Math.ceil(coercedNumber);                                                                      // 675\n            }                                                                                                          // 676\n        }                                                                                                              // 677\n                                                                                                                       // 678\n        return value;                                                                                                  // 679\n    }                                                                                                                  // 680\n                                                                                                                       // 681\n    function daysInMonth(year, month) {                                                                                // 682\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 683\n    }                                                                                                                  // 684\n                                                                                                                       // 685\n    function weeksInYear(year, dow, doy) {                                                                             // 686\n        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;                                          // 687\n    }                                                                                                                  // 688\n                                                                                                                       // 689\n    function daysInYear(year) {                                                                                        // 690\n        return isLeapYear(year) ? 366 : 365;                                                                           // 691\n    }                                                                                                                  // 692\n                                                                                                                       // 693\n    function isLeapYear(year) {                                                                                        // 694\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 695\n    }                                                                                                                  // 696\n                                                                                                                       // 697\n    function checkOverflow(m) {                                                                                        // 698\n        var overflow;                                                                                                  // 699\n        if (m._a && m._pf.overflow === -2) {                                                                           // 700\n            overflow =                                                                                                 // 701\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :                                                          // 702\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :                           // 703\n                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||                                                                   // 704\n                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||                                                       // 705\n                                           m._a[SECOND] !== 0 ||                                                       // 706\n                                           m._a[MILLISECOND] !== 0)) ? HOUR :                                          // 707\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :                                                       // 708\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :                                                       // 709\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :                                       // 710\n                -1;                                                                                                    // 711\n                                                                                                                       // 712\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                                    // 713\n                overflow = DATE;                                                                                       // 714\n            }                                                                                                          // 715\n                                                                                                                       // 716\n            m._pf.overflow = overflow;                                                                                 // 717\n        }                                                                                                              // 718\n    }                                                                                                                  // 719\n                                                                                                                       // 720\n    function isValid(m) {                                                                                              // 721\n        if (m._isValid == null) {                                                                                      // 722\n            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 723\n                m._pf.overflow < 0 &&                                                                                  // 724\n                !m._pf.empty &&                                                                                        // 725\n                !m._pf.invalidMonth &&                                                                                 // 726\n                !m._pf.nullInput &&                                                                                    // 727\n                !m._pf.invalidFormat &&                                                                                // 728\n                !m._pf.userInvalidated;                                                                                // 729\n                                                                                                                       // 730\n            if (m._strict) {                                                                                           // 731\n                m._isValid = m._isValid &&                                                                             // 732\n                    m._pf.charsLeftOver === 0 &&                                                                       // 733\n                    m._pf.unusedTokens.length === 0 &&                                                                 // 734\n                    m._pf.bigHour === undefined;                                                                       // 735\n            }                                                                                                          // 736\n        }                                                                                                              // 737\n        return m._isValid;                                                                                             // 738\n    }                                                                                                                  // 739\n                                                                                                                       // 740\n    function normalizeLocale(key) {                                                                                    // 741\n        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 742\n    }                                                                                                                  // 743\n                                                                                                                       // 744\n    // pick the locale from the array                                                                                  // 745\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 746\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {                                                                                     // 748\n        var i = 0, j, next, locale, split;                                                                             // 749\n                                                                                                                       // 750\n        while (i < names.length) {                                                                                     // 751\n            split = normalizeLocale(names[i]).split('-');                                                              // 752\n            j = split.length;                                                                                          // 753\n            next = normalizeLocale(names[i + 1]);                                                                      // 754\n            next = next ? next.split('-') : null;                                                                      // 755\n            while (j > 0) {                                                                                            // 756\n                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 757\n                if (locale) {                                                                                          // 758\n                    return locale;                                                                                     // 759\n                }                                                                                                      // 760\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 761\n                    //the next array item is better than a shallower substring of this one                             // 762\n                    break;                                                                                             // 763\n                }                                                                                                      // 764\n                j--;                                                                                                   // 765\n            }                                                                                                          // 766\n            i++;                                                                                                       // 767\n        }                                                                                                              // 768\n        return null;                                                                                                   // 769\n    }                                                                                                                  // 770\n                                                                                                                       // 771\n    function loadLocale(name) {                                                                                        // 772\n        var oldLocale = null;                                                                                          // 773\n        if (!locales[name] && hasModule) {                                                                             // 774\n            try {                                                                                                      // 775\n                oldLocale = moment.locale();                                                                           // 776\n                require('./locale/' + name);                                                                           // 777\n                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales\n                moment.locale(oldLocale);                                                                              // 779\n            } catch (e) { }                                                                                            // 780\n        }                                                                                                              // 781\n        return locales[name];                                                                                          // 782\n    }                                                                                                                  // 783\n                                                                                                                       // 784\n    // Return a moment from input, that is local/utc/zone equivalent to model.                                         // 785\n    function makeAs(input, model) {                                                                                    // 786\n        var res, diff;                                                                                                 // 787\n        if (model._isUTC) {                                                                                            // 788\n            res = model.clone();                                                                                       // 789\n            diff = (moment.isMoment(input) || isDate(input) ?                                                          // 790\n                    +input : +moment(input)) - (+res);                                                                 // 791\n            // Use low-level api, because this fn is low-level api.                                                    // 792\n            res._d.setTime(+res._d + diff);                                                                            // 793\n            moment.updateOffset(res, false);                                                                           // 794\n            return res;                                                                                                // 795\n        } else {                                                                                                       // 796\n            return moment(input).local();                                                                              // 797\n        }                                                                                                              // 798\n    }                                                                                                                  // 799\n                                                                                                                       // 800\n    /************************************                                                                              // 801\n        Locale                                                                                                         // 802\n    ************************************/                                                                              // 803\n                                                                                                                       // 804\n                                                                                                                       // 805\n    extend(Locale.prototype, {                                                                                         // 806\n                                                                                                                       // 807\n        set : function (config) {                                                                                      // 808\n            var prop, i;                                                                                               // 809\n            for (i in config) {                                                                                        // 810\n                prop = config[i];                                                                                      // 811\n                if (typeof prop === 'function') {                                                                      // 812\n                    this[i] = prop;                                                                                    // 813\n                } else {                                                                                               // 814\n                    this['_' + i] = prop;                                                                              // 815\n                }                                                                                                      // 816\n            }                                                                                                          // 817\n            // Lenient ordinal parsing accepts just a number in addition to                                            // 818\n            // number + (possibly) stuff coming from _ordinalParseLenient.                                             // 819\n            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\\d{1,2}/.source);                // 820\n        },                                                                                                             // 821\n                                                                                                                       // 822\n        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),  // 823\n        months : function (m) {                                                                                        // 824\n            return this._months[m.month()];                                                                            // 825\n        },                                                                                                             // 826\n                                                                                                                       // 827\n        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                   // 828\n        monthsShort : function (m) {                                                                                   // 829\n            return this._monthsShort[m.month()];                                                                       // 830\n        },                                                                                                             // 831\n                                                                                                                       // 832\n        monthsParse : function (monthName, format, strict) {                                                           // 833\n            var i, mom, regex;                                                                                         // 834\n                                                                                                                       // 835\n            if (!this._monthsParse) {                                                                                  // 836\n                this._monthsParse = [];                                                                                // 837\n                this._longMonthsParse = [];                                                                            // 838\n                this._shortMonthsParse = [];                                                                           // 839\n            }                                                                                                          // 840\n                                                                                                                       // 841\n            for (i = 0; i < 12; i++) {                                                                                 // 842\n                // make the regex if we don't have it already                                                          // 843\n                mom = moment.utc([2000, i]);                                                                           // 844\n                if (strict && !this._longMonthsParse[i]) {                                                             // 845\n                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');     // 846\n                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n                }                                                                                                      // 848\n                if (!strict && !this._monthsParse[i]) {                                                                // 849\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                             // 850\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                    // 851\n                }                                                                                                      // 852\n                // test the regex                                                                                      // 853\n                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                         // 854\n                    return i;                                                                                          // 855\n                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                  // 856\n                    return i;                                                                                          // 857\n                } else if (!strict && this._monthsParse[i].test(monthName)) {                                          // 858\n                    return i;                                                                                          // 859\n                }                                                                                                      // 860\n            }                                                                                                          // 861\n        },                                                                                                             // 862\n                                                                                                                       // 863\n        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                             // 864\n        weekdays : function (m) {                                                                                      // 865\n            return this._weekdays[m.day()];                                                                            // 866\n        },                                                                                                             // 867\n                                                                                                                       // 868\n        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                     // 869\n        weekdaysShort : function (m) {                                                                                 // 870\n            return this._weekdaysShort[m.day()];                                                                       // 871\n        },                                                                                                             // 872\n                                                                                                                       // 873\n        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                              // 874\n        weekdaysMin : function (m) {                                                                                   // 875\n            return this._weekdaysMin[m.day()];                                                                         // 876\n        },                                                                                                             // 877\n                                                                                                                       // 878\n        weekdaysParse : function (weekdayName) {                                                                       // 879\n            var i, mom, regex;                                                                                         // 880\n                                                                                                                       // 881\n            if (!this._weekdaysParse) {                                                                                // 882\n                this._weekdaysParse = [];                                                                              // 883\n            }                                                                                                          // 884\n                                                                                                                       // 885\n            for (i = 0; i < 7; i++) {                                                                                  // 886\n                // make the regex if we don't have it already                                                          // 887\n                if (!this._weekdaysParse[i]) {                                                                         // 888\n                    mom = moment([2000, 1]).day(i);                                                                    // 889\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                  // 891\n                }                                                                                                      // 892\n                // test the regex                                                                                      // 893\n                if (this._weekdaysParse[i].test(weekdayName)) {                                                        // 894\n                    return i;                                                                                          // 895\n                }                                                                                                      // 896\n            }                                                                                                          // 897\n        },                                                                                                             // 898\n                                                                                                                       // 899\n        _longDateFormat : {                                                                                            // 900\n            LTS : 'h:mm:ss A',                                                                                         // 901\n            LT : 'h:mm A',                                                                                             // 902\n            L : 'MM/DD/YYYY',                                                                                          // 903\n            LL : 'MMMM D, YYYY',                                                                                       // 904\n            LLL : 'MMMM D, YYYY LT',                                                                                   // 905\n            LLLL : 'dddd, MMMM D, YYYY LT'                                                                             // 906\n        },                                                                                                             // 907\n        longDateFormat : function (key) {                                                                              // 908\n            var output = this._longDateFormat[key];                                                                    // 909\n            if (!output && this._longDateFormat[key.toUpperCase()]) {                                                  // 910\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {          // 911\n                    return val.slice(1);                                                                               // 912\n                });                                                                                                    // 913\n                this._longDateFormat[key] = output;                                                                    // 914\n            }                                                                                                          // 915\n            return output;                                                                                             // 916\n        },                                                                                                             // 917\n                                                                                                                       // 918\n        isPM : function (input) {                                                                                      // 919\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                         // 920\n            // Using charAt should be more compatible.                                                                 // 921\n            return ((input + '').toLowerCase().charAt(0) === 'p');                                                     // 922\n        },                                                                                                             // 923\n                                                                                                                       // 924\n        _meridiemParse : /[ap]\\.?m?\\.?/i,                                                                              // 925\n        meridiem : function (hours, minutes, isLower) {                                                                // 926\n            if (hours > 11) {                                                                                          // 927\n                return isLower ? 'pm' : 'PM';                                                                          // 928\n            } else {                                                                                                   // 929\n                return isLower ? 'am' : 'AM';                                                                          // 930\n            }                                                                                                          // 931\n        },                                                                                                             // 932\n                                                                                                                       // 933\n        _calendar : {                                                                                                  // 934\n            sameDay : '[Today at] LT',                                                                                 // 935\n            nextDay : '[Tomorrow at] LT',                                                                              // 936\n            nextWeek : 'dddd [at] LT',                                                                                 // 937\n            lastDay : '[Yesterday at] LT',                                                                             // 938\n            lastWeek : '[Last] dddd [at] LT',                                                                          // 939\n            sameElse : 'L'                                                                                             // 940\n        },                                                                                                             // 941\n        calendar : function (key, mom, now) {                                                                          // 942\n            var output = this._calendar[key];                                                                          // 943\n            return typeof output === 'function' ? output.apply(mom, [now]) : output;                                   // 944\n        },                                                                                                             // 945\n                                                                                                                       // 946\n        _relativeTime : {                                                                                              // 947\n            future : 'in %s',                                                                                          // 948\n            past : '%s ago',                                                                                           // 949\n            s : 'a few seconds',                                                                                       // 950\n            m : 'a minute',                                                                                            // 951\n            mm : '%d minutes',                                                                                         // 952\n            h : 'an hour',                                                                                             // 953\n            hh : '%d hours',                                                                                           // 954\n            d : 'a day',                                                                                               // 955\n            dd : '%d days',                                                                                            // 956\n            M : 'a month',                                                                                             // 957\n            MM : '%d months',                                                                                          // 958\n            y : 'a year',                                                                                              // 959\n            yy : '%d years'                                                                                            // 960\n        },                                                                                                             // 961\n                                                                                                                       // 962\n        relativeTime : function (number, withoutSuffix, string, isFuture) {                                            // 963\n            var output = this._relativeTime[string];                                                                   // 964\n            return (typeof output === 'function') ?                                                                    // 965\n                output(number, withoutSuffix, string, isFuture) :                                                      // 966\n                output.replace(/%d/i, number);                                                                         // 967\n        },                                                                                                             // 968\n                                                                                                                       // 969\n        pastFuture : function (diff, output) {                                                                         // 970\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                             // 971\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);                      // 972\n        },                                                                                                             // 973\n                                                                                                                       // 974\n        ordinal : function (number) {                                                                                  // 975\n            return this._ordinal.replace('%d', number);                                                                // 976\n        },                                                                                                             // 977\n        _ordinal : '%d',                                                                                               // 978\n        _ordinalParse : /\\d{1,2}/,                                                                                     // 979\n                                                                                                                       // 980\n        preparse : function (string) {                                                                                 // 981\n            return string;                                                                                             // 982\n        },                                                                                                             // 983\n                                                                                                                       // 984\n        postformat : function (string) {                                                                               // 985\n            return string;                                                                                             // 986\n        },                                                                                                             // 987\n                                                                                                                       // 988\n        week : function (mom) {                                                                                        // 989\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;                                               // 990\n        },                                                                                                             // 991\n                                                                                                                       // 992\n        _week : {                                                                                                      // 993\n            dow : 0, // Sunday is the first day of the week.                                                           // 994\n            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 995\n        },                                                                                                             // 996\n                                                                                                                       // 997\n        _invalidDate: 'Invalid date',                                                                                  // 998\n        invalidDate: function () {                                                                                     // 999\n            return this._invalidDate;                                                                                  // 1000\n        }                                                                                                              // 1001\n    });                                                                                                                // 1002\n                                                                                                                       // 1003\n    /************************************                                                                              // 1004\n        Formatting                                                                                                     // 1005\n    ************************************/                                                                              // 1006\n                                                                                                                       // 1007\n                                                                                                                       // 1008\n    function removeFormattingTokens(input) {                                                                           // 1009\n        if (input.match(/\\[[\\s\\S]/)) {                                                                                 // 1010\n            return input.replace(/^\\[|\\]$/g, '');                                                                      // 1011\n        }                                                                                                              // 1012\n        return input.replace(/\\\\/g, '');                                                                               // 1013\n    }                                                                                                                  // 1014\n                                                                                                                       // 1015\n    function makeFormatFunction(format) {                                                                              // 1016\n        var array = format.match(formattingTokens), i, length;                                                         // 1017\n                                                                                                                       // 1018\n        for (i = 0, length = array.length; i < length; i++) {                                                          // 1019\n            if (formatTokenFunctions[array[i]]) {                                                                      // 1020\n                array[i] = formatTokenFunctions[array[i]];                                                             // 1021\n            } else {                                                                                                   // 1022\n                array[i] = removeFormattingTokens(array[i]);                                                           // 1023\n            }                                                                                                          // 1024\n        }                                                                                                              // 1025\n                                                                                                                       // 1026\n        return function (mom) {                                                                                        // 1027\n            var output = '';                                                                                           // 1028\n            for (i = 0; i < length; i++) {                                                                             // 1029\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 1030\n            }                                                                                                          // 1031\n            return output;                                                                                             // 1032\n        };                                                                                                             // 1033\n    }                                                                                                                  // 1034\n                                                                                                                       // 1035\n    // format date using native date object                                                                            // 1036\n    function formatMoment(m, format) {                                                                                 // 1037\n        if (!m.isValid()) {                                                                                            // 1038\n            return m.localeData().invalidDate();                                                                       // 1039\n        }                                                                                                              // 1040\n                                                                                                                       // 1041\n        format = expandFormat(format, m.localeData());                                                                 // 1042\n                                                                                                                       // 1043\n        if (!formatFunctions[format]) {                                                                                // 1044\n            formatFunctions[format] = makeFormatFunction(format);                                                      // 1045\n        }                                                                                                              // 1046\n                                                                                                                       // 1047\n        return formatFunctions[format](m);                                                                             // 1048\n    }                                                                                                                  // 1049\n                                                                                                                       // 1050\n    function expandFormat(format, locale) {                                                                            // 1051\n        var i = 5;                                                                                                     // 1052\n                                                                                                                       // 1053\n        function replaceLongDateFormatTokens(input) {                                                                  // 1054\n            return locale.longDateFormat(input) || input;                                                              // 1055\n        }                                                                                                              // 1056\n                                                                                                                       // 1057\n        localFormattingTokens.lastIndex = 0;                                                                           // 1058\n        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 1059\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 1060\n            localFormattingTokens.lastIndex = 0;                                                                       // 1061\n            i -= 1;                                                                                                    // 1062\n        }                                                                                                              // 1063\n                                                                                                                       // 1064\n        return format;                                                                                                 // 1065\n    }                                                                                                                  // 1066\n                                                                                                                       // 1067\n                                                                                                                       // 1068\n    /************************************                                                                              // 1069\n        Parsing                                                                                                        // 1070\n    ************************************/                                                                              // 1071\n                                                                                                                       // 1072\n                                                                                                                       // 1073\n    // get the regex to find the next token                                                                            // 1074\n    function getParseRegexForToken(token, config) {                                                                    // 1075\n        var a, strict = config._strict;                                                                                // 1076\n        switch (token) {                                                                                               // 1077\n        case 'Q':                                                                                                      // 1078\n            return parseTokenOneDigit;                                                                                 // 1079\n        case 'DDDD':                                                                                                   // 1080\n            return parseTokenThreeDigits;                                                                              // 1081\n        case 'YYYY':                                                                                                   // 1082\n        case 'GGGG':                                                                                                   // 1083\n        case 'gggg':                                                                                                   // 1084\n            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;                                          // 1085\n        case 'Y':                                                                                                      // 1086\n        case 'G':                                                                                                      // 1087\n        case 'g':                                                                                                      // 1088\n            return parseTokenSignedNumber;                                                                             // 1089\n        case 'YYYYYY':                                                                                                 // 1090\n        case 'YYYYY':                                                                                                  // 1091\n        case 'GGGGG':                                                                                                  // 1092\n        case 'ggggg':                                                                                                  // 1093\n            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;                                            // 1094\n        case 'S':                                                                                                      // 1095\n            if (strict) {                                                                                              // 1096\n                return parseTokenOneDigit;                                                                             // 1097\n            }                                                                                                          // 1098\n            /* falls through */                                                                                        // 1099\n        case 'SS':                                                                                                     // 1100\n            if (strict) {                                                                                              // 1101\n                return parseTokenTwoDigits;                                                                            // 1102\n            }                                                                                                          // 1103\n            /* falls through */                                                                                        // 1104\n        case 'SSS':                                                                                                    // 1105\n            if (strict) {                                                                                              // 1106\n                return parseTokenThreeDigits;                                                                          // 1107\n            }                                                                                                          // 1108\n            /* falls through */                                                                                        // 1109\n        case 'DDD':                                                                                                    // 1110\n            return parseTokenOneToThreeDigits;                                                                         // 1111\n        case 'MMM':                                                                                                    // 1112\n        case 'MMMM':                                                                                                   // 1113\n        case 'dd':                                                                                                     // 1114\n        case 'ddd':                                                                                                    // 1115\n        case 'dddd':                                                                                                   // 1116\n            return parseTokenWord;                                                                                     // 1117\n        case 'a':                                                                                                      // 1118\n        case 'A':                                                                                                      // 1119\n            return config._locale._meridiemParse;                                                                      // 1120\n        case 'x':                                                                                                      // 1121\n            return parseTokenOffsetMs;                                                                                 // 1122\n        case 'X':                                                                                                      // 1123\n            return parseTokenTimestampMs;                                                                              // 1124\n        case 'Z':                                                                                                      // 1125\n        case 'ZZ':                                                                                                     // 1126\n            return parseTokenTimezone;                                                                                 // 1127\n        case 'T':                                                                                                      // 1128\n            return parseTokenT;                                                                                        // 1129\n        case 'SSSS':                                                                                                   // 1130\n            return parseTokenDigits;                                                                                   // 1131\n        case 'MM':                                                                                                     // 1132\n        case 'DD':                                                                                                     // 1133\n        case 'YY':                                                                                                     // 1134\n        case 'GG':                                                                                                     // 1135\n        case 'gg':                                                                                                     // 1136\n        case 'HH':                                                                                                     // 1137\n        case 'hh':                                                                                                     // 1138\n        case 'mm':                                                                                                     // 1139\n        case 'ss':                                                                                                     // 1140\n        case 'ww':                                                                                                     // 1141\n        case 'WW':                                                                                                     // 1142\n            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;                                            // 1143\n        case 'M':                                                                                                      // 1144\n        case 'D':                                                                                                      // 1145\n        case 'd':                                                                                                      // 1146\n        case 'H':                                                                                                      // 1147\n        case 'h':                                                                                                      // 1148\n        case 'm':                                                                                                      // 1149\n        case 's':                                                                                                      // 1150\n        case 'w':                                                                                                      // 1151\n        case 'W':                                                                                                      // 1152\n        case 'e':                                                                                                      // 1153\n        case 'E':                                                                                                      // 1154\n            return parseTokenOneOrTwoDigits;                                                                           // 1155\n        case 'Do':                                                                                                     // 1156\n            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;                        // 1157\n        default :                                                                                                      // 1158\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), 'i'));                                // 1159\n            return a;                                                                                                  // 1160\n        }                                                                                                              // 1161\n    }                                                                                                                  // 1162\n                                                                                                                       // 1163\n    function timezoneMinutesFromString(string) {                                                                       // 1164\n        string = string || '';                                                                                         // 1165\n        var possibleTzMatches = (string.match(parseTokenTimezone) || []),                                              // 1166\n            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],                                           // 1167\n            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],                                         // 1168\n            minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 1169\n                                                                                                                       // 1170\n        return parts[0] === '+' ? -minutes : minutes;                                                                  // 1171\n    }                                                                                                                  // 1172\n                                                                                                                       // 1173\n    // function to convert string input to date                                                                        // 1174\n    function addTimeToArrayFromToken(token, input, config) {                                                           // 1175\n        var a, datePartArray = config._a;                                                                              // 1176\n                                                                                                                       // 1177\n        switch (token) {                                                                                               // 1178\n        // QUARTER                                                                                                     // 1179\n        case 'Q':                                                                                                      // 1180\n            if (input != null) {                                                                                       // 1181\n                datePartArray[MONTH] = (toInt(input) - 1) * 3;                                                         // 1182\n            }                                                                                                          // 1183\n            break;                                                                                                     // 1184\n        // MONTH                                                                                                       // 1185\n        case 'M' : // fall through to MM                                                                               // 1186\n        case 'MM' :                                                                                                    // 1187\n            if (input != null) {                                                                                       // 1188\n                datePartArray[MONTH] = toInt(input) - 1;                                                               // 1189\n            }                                                                                                          // 1190\n            break;                                                                                                     // 1191\n        case 'MMM' : // fall through to MMMM                                                                           // 1192\n        case 'MMMM' :                                                                                                  // 1193\n            a = config._locale.monthsParse(input, token, config._strict);                                              // 1194\n            // if we didn't find a month name, mark the date as invalid.                                               // 1195\n            if (a != null) {                                                                                           // 1196\n                datePartArray[MONTH] = a;                                                                              // 1197\n            } else {                                                                                                   // 1198\n                config._pf.invalidMonth = input;                                                                       // 1199\n            }                                                                                                          // 1200\n            break;                                                                                                     // 1201\n        // DAY OF MONTH                                                                                                // 1202\n        case 'D' : // fall through to DD                                                                               // 1203\n        case 'DD' :                                                                                                    // 1204\n            if (input != null) {                                                                                       // 1205\n                datePartArray[DATE] = toInt(input);                                                                    // 1206\n            }                                                                                                          // 1207\n            break;                                                                                                     // 1208\n        case 'Do' :                                                                                                    // 1209\n            if (input != null) {                                                                                       // 1210\n                datePartArray[DATE] = toInt(parseInt(                                                                  // 1211\n                            input.match(/\\d{1,2}/)[0], 10));                                                           // 1212\n            }                                                                                                          // 1213\n            break;                                                                                                     // 1214\n        // DAY OF YEAR                                                                                                 // 1215\n        case 'DDD' : // fall through to DDDD                                                                           // 1216\n        case 'DDDD' :                                                                                                  // 1217\n            if (input != null) {                                                                                       // 1218\n                config._dayOfYear = toInt(input);                                                                      // 1219\n            }                                                                                                          // 1220\n                                                                                                                       // 1221\n            break;                                                                                                     // 1222\n        // YEAR                                                                                                        // 1223\n        case 'YY' :                                                                                                    // 1224\n            datePartArray[YEAR] = moment.parseTwoDigitYear(input);                                                     // 1225\n            break;                                                                                                     // 1226\n        case 'YYYY' :                                                                                                  // 1227\n        case 'YYYYY' :                                                                                                 // 1228\n        case 'YYYYYY' :                                                                                                // 1229\n            datePartArray[YEAR] = toInt(input);                                                                        // 1230\n            break;                                                                                                     // 1231\n        // AM / PM                                                                                                     // 1232\n        case 'a' : // fall through to A                                                                                // 1233\n        case 'A' :                                                                                                     // 1234\n            config._isPm = config._locale.isPM(input);                                                                 // 1235\n            break;                                                                                                     // 1236\n        // HOUR                                                                                                        // 1237\n        case 'h' : // fall through to hh                                                                               // 1238\n        case 'hh' :                                                                                                    // 1239\n            config._pf.bigHour = true;                                                                                 // 1240\n            /* falls through */                                                                                        // 1241\n        case 'H' : // fall through to HH                                                                               // 1242\n        case 'HH' :                                                                                                    // 1243\n            datePartArray[HOUR] = toInt(input);                                                                        // 1244\n            break;                                                                                                     // 1245\n        // MINUTE                                                                                                      // 1246\n        case 'm' : // fall through to mm                                                                               // 1247\n        case 'mm' :                                                                                                    // 1248\n            datePartArray[MINUTE] = toInt(input);                                                                      // 1249\n            break;                                                                                                     // 1250\n        // SECOND                                                                                                      // 1251\n        case 's' : // fall through to ss                                                                               // 1252\n        case 'ss' :                                                                                                    // 1253\n            datePartArray[SECOND] = toInt(input);                                                                      // 1254\n            break;                                                                                                     // 1255\n        // MILLISECOND                                                                                                 // 1256\n        case 'S' :                                                                                                     // 1257\n        case 'SS' :                                                                                                    // 1258\n        case 'SSS' :                                                                                                   // 1259\n        case 'SSSS' :                                                                                                  // 1260\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);                                                 // 1261\n            break;                                                                                                     // 1262\n        // UNIX OFFSET (MILLISECONDS)                                                                                  // 1263\n        case 'x':                                                                                                      // 1264\n            config._d = new Date(toInt(input));                                                                        // 1265\n            break;                                                                                                     // 1266\n        // UNIX TIMESTAMP WITH MS                                                                                      // 1267\n        case 'X':                                                                                                      // 1268\n            config._d = new Date(parseFloat(input) * 1000);                                                            // 1269\n            break;                                                                                                     // 1270\n        // TIMEZONE                                                                                                    // 1271\n        case 'Z' : // fall through to ZZ                                                                               // 1272\n        case 'ZZ' :                                                                                                    // 1273\n            config._useUTC = true;                                                                                     // 1274\n            config._tzm = timezoneMinutesFromString(input);                                                            // 1275\n            break;                                                                                                     // 1276\n        // WEEKDAY - human                                                                                             // 1277\n        case 'dd':                                                                                                     // 1278\n        case 'ddd':                                                                                                    // 1279\n        case 'dddd':                                                                                                   // 1280\n            a = config._locale.weekdaysParse(input);                                                                   // 1281\n            // if we didn't get a weekday name, mark the date as invalid                                               // 1282\n            if (a != null) {                                                                                           // 1283\n                config._w = config._w || {};                                                                           // 1284\n                config._w['d'] = a;                                                                                    // 1285\n            } else {                                                                                                   // 1286\n                config._pf.invalidWeekday = input;                                                                     // 1287\n            }                                                                                                          // 1288\n            break;                                                                                                     // 1289\n        // WEEK, WEEK DAY - numeric                                                                                    // 1290\n        case 'w':                                                                                                      // 1291\n        case 'ww':                                                                                                     // 1292\n        case 'W':                                                                                                      // 1293\n        case 'WW':                                                                                                     // 1294\n        case 'd':                                                                                                      // 1295\n        case 'e':                                                                                                      // 1296\n        case 'E':                                                                                                      // 1297\n            token = token.substr(0, 1);                                                                                // 1298\n            /* falls through */                                                                                        // 1299\n        case 'gggg':                                                                                                   // 1300\n        case 'GGGG':                                                                                                   // 1301\n        case 'GGGGG':                                                                                                  // 1302\n            token = token.substr(0, 2);                                                                                // 1303\n            if (input) {                                                                                               // 1304\n                config._w = config._w || {};                                                                           // 1305\n                config._w[token] = toInt(input);                                                                       // 1306\n            }                                                                                                          // 1307\n            break;                                                                                                     // 1308\n        case 'gg':                                                                                                     // 1309\n        case 'GG':                                                                                                     // 1310\n            config._w = config._w || {};                                                                               // 1311\n            config._w[token] = moment.parseTwoDigitYear(input);                                                        // 1312\n        }                                                                                                              // 1313\n    }                                                                                                                  // 1314\n                                                                                                                       // 1315\n    function dayOfYearFromWeekInfo(config) {                                                                           // 1316\n        var w, weekYear, week, weekday, dow, doy, temp;                                                                // 1317\n                                                                                                                       // 1318\n        w = config._w;                                                                                                 // 1319\n        if (w.GG != null || w.W != null || w.E != null) {                                                              // 1320\n            dow = 1;                                                                                                   // 1321\n            doy = 4;                                                                                                   // 1322\n                                                                                                                       // 1323\n            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 1324\n            // how we interpret now (local, utc, fixed offset). So create                                              // 1325\n            // a now version of current config (take local/utc/offset flags, and                                       // 1326\n            // create now).                                                                                            // 1327\n            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);                                    // 1328\n            week = dfl(w.W, 1);                                                                                        // 1329\n            weekday = dfl(w.E, 1);                                                                                     // 1330\n        } else {                                                                                                       // 1331\n            dow = config._locale._week.dow;                                                                            // 1332\n            doy = config._locale._week.doy;                                                                            // 1333\n                                                                                                                       // 1334\n            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);                                // 1335\n            week = dfl(w.w, 1);                                                                                        // 1336\n                                                                                                                       // 1337\n            if (w.d != null) {                                                                                         // 1338\n                // weekday -- low day numbers are considered next week                                                 // 1339\n                weekday = w.d;                                                                                         // 1340\n                if (weekday < dow) {                                                                                   // 1341\n                    ++week;                                                                                            // 1342\n                }                                                                                                      // 1343\n            } else if (w.e != null) {                                                                                  // 1344\n                // local weekday -- counting starts from begining of week                                              // 1345\n                weekday = w.e + dow;                                                                                   // 1346\n            } else {                                                                                                   // 1347\n                // default to begining of week                                                                         // 1348\n                weekday = dow;                                                                                         // 1349\n            }                                                                                                          // 1350\n        }                                                                                                              // 1351\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);                                                  // 1352\n                                                                                                                       // 1353\n        config._a[YEAR] = temp.year;                                                                                   // 1354\n        config._dayOfYear = temp.dayOfYear;                                                                            // 1355\n    }                                                                                                                  // 1356\n                                                                                                                       // 1357\n    // convert an array to a date.                                                                                     // 1358\n    // the array should mirror the parameters below                                                                    // 1359\n    // note: all values past the year are optional and will default to the lowest possible value.                      // 1360\n    // [year, month, day , hour, minute, second, millisecond]                                                          // 1361\n    function dateFromConfig(config) {                                                                                  // 1362\n        var i, date, input = [], currentDate, yearToUse;                                                               // 1363\n                                                                                                                       // 1364\n        if (config._d) {                                                                                               // 1365\n            return;                                                                                                    // 1366\n        }                                                                                                              // 1367\n                                                                                                                       // 1368\n        currentDate = currentDateArray(config);                                                                        // 1369\n                                                                                                                       // 1370\n        //compute day of the year from weeks and weekdays                                                              // 1371\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 1372\n            dayOfYearFromWeekInfo(config);                                                                             // 1373\n        }                                                                                                              // 1374\n                                                                                                                       // 1375\n        //if the day of the year is set, figure out what it is                                                         // 1376\n        if (config._dayOfYear) {                                                                                       // 1377\n            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);                                                       // 1378\n                                                                                                                       // 1379\n            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 1380\n                config._pf._overflowDayOfYear = true;                                                                  // 1381\n            }                                                                                                          // 1382\n                                                                                                                       // 1383\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 1384\n            config._a[MONTH] = date.getUTCMonth();                                                                     // 1385\n            config._a[DATE] = date.getUTCDate();                                                                       // 1386\n        }                                                                                                              // 1387\n                                                                                                                       // 1388\n        // Default to current date.                                                                                    // 1389\n        // * if no year, month, day of month are given, default to today                                               // 1390\n        // * if day of month is given, default month and year                                                          // 1391\n        // * if month is given, default only year                                                                      // 1392\n        // * if year is given, don't default anything                                                                  // 1393\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 1394\n            config._a[i] = input[i] = currentDate[i];                                                                  // 1395\n        }                                                                                                              // 1396\n                                                                                                                       // 1397\n        // Zero out whatever was not defaulted, including time                                                         // 1398\n        for (; i < 7; i++) {                                                                                           // 1399\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 1400\n        }                                                                                                              // 1401\n                                                                                                                       // 1402\n        // Check for 24:00:00.000                                                                                      // 1403\n        if (config._a[HOUR] === 24 &&                                                                                  // 1404\n                config._a[MINUTE] === 0 &&                                                                             // 1405\n                config._a[SECOND] === 0 &&                                                                             // 1406\n                config._a[MILLISECOND] === 0) {                                                                        // 1407\n            config._nextDay = true;                                                                                    // 1408\n            config._a[HOUR] = 0;                                                                                       // 1409\n        }                                                                                                              // 1410\n                                                                                                                       // 1411\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);                                      // 1412\n        // Apply timezone offset from input. The actual zone can be changed                                            // 1413\n        // with parseZone.                                                                                             // 1414\n        if (config._tzm != null) {                                                                                     // 1415\n            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);                                          // 1416\n        }                                                                                                              // 1417\n                                                                                                                       // 1418\n        if (config._nextDay) {                                                                                         // 1419\n            config._a[HOUR] = 24;                                                                                      // 1420\n        }                                                                                                              // 1421\n    }                                                                                                                  // 1422\n                                                                                                                       // 1423\n    function dateFromObject(config) {                                                                                  // 1424\n        var normalizedInput;                                                                                           // 1425\n                                                                                                                       // 1426\n        if (config._d) {                                                                                               // 1427\n            return;                                                                                                    // 1428\n        }                                                                                                              // 1429\n                                                                                                                       // 1430\n        normalizedInput = normalizeObjectUnits(config._i);                                                             // 1431\n        config._a = [                                                                                                  // 1432\n            normalizedInput.year,                                                                                      // 1433\n            normalizedInput.month,                                                                                     // 1434\n            normalizedInput.day || normalizedInput.date,                                                               // 1435\n            normalizedInput.hour,                                                                                      // 1436\n            normalizedInput.minute,                                                                                    // 1437\n            normalizedInput.second,                                                                                    // 1438\n            normalizedInput.millisecond                                                                                // 1439\n        ];                                                                                                             // 1440\n                                                                                                                       // 1441\n        dateFromConfig(config);                                                                                        // 1442\n    }                                                                                                                  // 1443\n                                                                                                                       // 1444\n    function currentDateArray(config) {                                                                                // 1445\n        var now = new Date();                                                                                          // 1446\n        if (config._useUTC) {                                                                                          // 1447\n            return [                                                                                                   // 1448\n                now.getUTCFullYear(),                                                                                  // 1449\n                now.getUTCMonth(),                                                                                     // 1450\n                now.getUTCDate()                                                                                       // 1451\n            ];                                                                                                         // 1452\n        } else {                                                                                                       // 1453\n            return [now.getFullYear(), now.getMonth(), now.getDate()];                                                 // 1454\n        }                                                                                                              // 1455\n    }                                                                                                                  // 1456\n                                                                                                                       // 1457\n    // date from string and format string                                                                              // 1458\n    function makeDateFromStringAndFormat(config) {                                                                     // 1459\n        if (config._f === moment.ISO_8601) {                                                                           // 1460\n            parseISO(config);                                                                                          // 1461\n            return;                                                                                                    // 1462\n        }                                                                                                              // 1463\n                                                                                                                       // 1464\n        config._a = [];                                                                                                // 1465\n        config._pf.empty = true;                                                                                       // 1466\n                                                                                                                       // 1467\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 1468\n        var string = '' + config._i,                                                                                   // 1469\n            i, parsedInput, tokens, token, skipped,                                                                    // 1470\n            stringLength = string.length,                                                                              // 1471\n            totalParsedInputLength = 0;                                                                                // 1472\n                                                                                                                       // 1473\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 1474\n                                                                                                                       // 1475\n        for (i = 0; i < tokens.length; i++) {                                                                          // 1476\n            token = tokens[i];                                                                                         // 1477\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 1478\n            if (parsedInput) {                                                                                         // 1479\n                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 1480\n                if (skipped.length > 0) {                                                                              // 1481\n                    config._pf.unusedInput.push(skipped);                                                              // 1482\n                }                                                                                                      // 1483\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 1484\n                totalParsedInputLength += parsedInput.length;                                                          // 1485\n            }                                                                                                          // 1486\n            // don't parse if it's not a known token                                                                   // 1487\n            if (formatTokenFunctions[token]) {                                                                         // 1488\n                if (parsedInput) {                                                                                     // 1489\n                    config._pf.empty = false;                                                                          // 1490\n                }                                                                                                      // 1491\n                else {                                                                                                 // 1492\n                    config._pf.unusedTokens.push(token);                                                               // 1493\n                }                                                                                                      // 1494\n                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 1495\n            }                                                                                                          // 1496\n            else if (config._strict && !parsedInput) {                                                                 // 1497\n                config._pf.unusedTokens.push(token);                                                                   // 1498\n            }                                                                                                          // 1499\n        }                                                                                                              // 1500\n                                                                                                                       // 1501\n        // add remaining unparsed input length to the string                                                           // 1502\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;                                              // 1503\n        if (string.length > 0) {                                                                                       // 1504\n            config._pf.unusedInput.push(string);                                                                       // 1505\n        }                                                                                                              // 1506\n                                                                                                                       // 1507\n        // clear _12h flag if hour is <= 12                                                                            // 1508\n        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {                                                    // 1509\n            config._pf.bigHour = undefined;                                                                            // 1510\n        }                                                                                                              // 1511\n        // handle am pm                                                                                                // 1512\n        if (config._isPm && config._a[HOUR] < 12) {                                                                    // 1513\n            config._a[HOUR] += 12;                                                                                     // 1514\n        }                                                                                                              // 1515\n        // if is 12 am, change hours to 0                                                                              // 1516\n        if (config._isPm === false && config._a[HOUR] === 12) {                                                        // 1517\n            config._a[HOUR] = 0;                                                                                       // 1518\n        }                                                                                                              // 1519\n        dateFromConfig(config);                                                                                        // 1520\n        checkOverflow(config);                                                                                         // 1521\n    }                                                                                                                  // 1522\n                                                                                                                       // 1523\n    function unescapeFormat(s) {                                                                                       // 1524\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {                   // 1525\n            return p1 || p2 || p3 || p4;                                                                               // 1526\n        });                                                                                                            // 1527\n    }                                                                                                                  // 1528\n                                                                                                                       // 1529\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 1530\n    function regexpEscape(s) {                                                                                         // 1531\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                            // 1532\n    }                                                                                                                  // 1533\n                                                                                                                       // 1534\n    // date from string and array of format strings                                                                    // 1535\n    function makeDateFromStringAndArray(config) {                                                                      // 1536\n        var tempConfig,                                                                                                // 1537\n            bestMoment,                                                                                                // 1538\n                                                                                                                       // 1539\n            scoreToBeat,                                                                                               // 1540\n            i,                                                                                                         // 1541\n            currentScore;                                                                                              // 1542\n                                                                                                                       // 1543\n        if (config._f.length === 0) {                                                                                  // 1544\n            config._pf.invalidFormat = true;                                                                           // 1545\n            config._d = new Date(NaN);                                                                                 // 1546\n            return;                                                                                                    // 1547\n        }                                                                                                              // 1548\n                                                                                                                       // 1549\n        for (i = 0; i < config._f.length; i++) {                                                                       // 1550\n            currentScore = 0;                                                                                          // 1551\n            tempConfig = copyConfig({}, config);                                                                       // 1552\n            if (config._useUTC != null) {                                                                              // 1553\n                tempConfig._useUTC = config._useUTC;                                                                   // 1554\n            }                                                                                                          // 1555\n            tempConfig._pf = defaultParsingFlags();                                                                    // 1556\n            tempConfig._f = config._f[i];                                                                              // 1557\n            makeDateFromStringAndFormat(tempConfig);                                                                   // 1558\n                                                                                                                       // 1559\n            if (!isValid(tempConfig)) {                                                                                // 1560\n                continue;                                                                                              // 1561\n            }                                                                                                          // 1562\n                                                                                                                       // 1563\n            // if there is any input that was not parsed add a penalty for that format                                 // 1564\n            currentScore += tempConfig._pf.charsLeftOver;                                                              // 1565\n                                                                                                                       // 1566\n            //or tokens                                                                                                // 1567\n            currentScore += tempConfig._pf.unusedTokens.length * 10;                                                   // 1568\n                                                                                                                       // 1569\n            tempConfig._pf.score = currentScore;                                                                       // 1570\n                                                                                                                       // 1571\n            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 1572\n                scoreToBeat = currentScore;                                                                            // 1573\n                bestMoment = tempConfig;                                                                               // 1574\n            }                                                                                                          // 1575\n        }                                                                                                              // 1576\n                                                                                                                       // 1577\n        extend(config, bestMoment || tempConfig);                                                                      // 1578\n    }                                                                                                                  // 1579\n                                                                                                                       // 1580\n    // date from iso format                                                                                            // 1581\n    function parseISO(config) {                                                                                        // 1582\n        var i, l,                                                                                                      // 1583\n            string = config._i,                                                                                        // 1584\n            match = isoRegex.exec(string);                                                                             // 1585\n                                                                                                                       // 1586\n        if (match) {                                                                                                   // 1587\n            config._pf.iso = true;                                                                                     // 1588\n            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 1589\n                if (isoDates[i][1].exec(string)) {                                                                     // 1590\n                    // match[5] should be 'T' or undefined                                                             // 1591\n                    config._f = isoDates[i][0] + (match[6] || ' ');                                                    // 1592\n                    break;                                                                                             // 1593\n                }                                                                                                      // 1594\n            }                                                                                                          // 1595\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                             // 1596\n                if (isoTimes[i][1].exec(string)) {                                                                     // 1597\n                    config._f += isoTimes[i][0];                                                                       // 1598\n                    break;                                                                                             // 1599\n                }                                                                                                      // 1600\n            }                                                                                                          // 1601\n            if (string.match(parseTokenTimezone)) {                                                                    // 1602\n                config._f += 'Z';                                                                                      // 1603\n            }                                                                                                          // 1604\n            makeDateFromStringAndFormat(config);                                                                       // 1605\n        } else {                                                                                                       // 1606\n            config._isValid = false;                                                                                   // 1607\n        }                                                                                                              // 1608\n    }                                                                                                                  // 1609\n                                                                                                                       // 1610\n    // date from iso format or fallback                                                                                // 1611\n    function makeDateFromString(config) {                                                                              // 1612\n        parseISO(config);                                                                                              // 1613\n        if (config._isValid === false) {                                                                               // 1614\n            delete config._isValid;                                                                                    // 1615\n            moment.createFromInputFallback(config);                                                                    // 1616\n        }                                                                                                              // 1617\n    }                                                                                                                  // 1618\n                                                                                                                       // 1619\n    function map(arr, fn) {                                                                                            // 1620\n        var res = [], i;                                                                                               // 1621\n        for (i = 0; i < arr.length; ++i) {                                                                             // 1622\n            res.push(fn(arr[i], i));                                                                                   // 1623\n        }                                                                                                              // 1624\n        return res;                                                                                                    // 1625\n    }                                                                                                                  // 1626\n                                                                                                                       // 1627\n    function makeDateFromInput(config) {                                                                               // 1628\n        var input = config._i, matched;                                                                                // 1629\n        if (input === undefined) {                                                                                     // 1630\n            config._d = new Date();                                                                                    // 1631\n        } else if (isDate(input)) {                                                                                    // 1632\n            config._d = new Date(+input);                                                                              // 1633\n        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {                                                 // 1634\n            config._d = new Date(+matched[1]);                                                                         // 1635\n        } else if (typeof input === 'string') {                                                                        // 1636\n            makeDateFromString(config);                                                                                // 1637\n        } else if (isArray(input)) {                                                                                   // 1638\n            config._a = map(input.slice(0), function (obj) {                                                           // 1639\n                return parseInt(obj, 10);                                                                              // 1640\n            });                                                                                                        // 1641\n            dateFromConfig(config);                                                                                    // 1642\n        } else if (typeof(input) === 'object') {                                                                       // 1643\n            dateFromObject(config);                                                                                    // 1644\n        } else if (typeof(input) === 'number') {                                                                       // 1645\n            // from milliseconds                                                                                       // 1646\n            config._d = new Date(input);                                                                               // 1647\n        } else {                                                                                                       // 1648\n            moment.createFromInputFallback(config);                                                                    // 1649\n        }                                                                                                              // 1650\n    }                                                                                                                  // 1651\n                                                                                                                       // 1652\n    function makeDate(y, m, d, h, M, s, ms) {                                                                          // 1653\n        //can't just apply() to create a date:                                                                         // 1654\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 1656\n                                                                                                                       // 1657\n        //the date constructor doesn't accept years < 1970                                                             // 1658\n        if (y < 1970) {                                                                                                // 1659\n            date.setFullYear(y);                                                                                       // 1660\n        }                                                                                                              // 1661\n        return date;                                                                                                   // 1662\n    }                                                                                                                  // 1663\n                                                                                                                       // 1664\n    function makeUTCDate(y) {                                                                                          // 1665\n        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 1666\n        if (y < 1970) {                                                                                                // 1667\n            date.setUTCFullYear(y);                                                                                    // 1668\n        }                                                                                                              // 1669\n        return date;                                                                                                   // 1670\n    }                                                                                                                  // 1671\n                                                                                                                       // 1672\n    function parseWeekday(input, locale) {                                                                             // 1673\n        if (typeof input === 'string') {                                                                               // 1674\n            if (!isNaN(input)) {                                                                                       // 1675\n                input = parseInt(input, 10);                                                                           // 1676\n            }                                                                                                          // 1677\n            else {                                                                                                     // 1678\n                input = locale.weekdaysParse(input);                                                                   // 1679\n                if (typeof input !== 'number') {                                                                       // 1680\n                    return null;                                                                                       // 1681\n                }                                                                                                      // 1682\n            }                                                                                                          // 1683\n        }                                                                                                              // 1684\n        return input;                                                                                                  // 1685\n    }                                                                                                                  // 1686\n                                                                                                                       // 1687\n    /************************************                                                                              // 1688\n        Relative Time                                                                                                  // 1689\n    ************************************/                                                                              // 1690\n                                                                                                                       // 1691\n                                                                                                                       // 1692\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 1693\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 1694\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 1695\n    }                                                                                                                  // 1696\n                                                                                                                       // 1697\n    function relativeTime(posNegDuration, withoutSuffix, locale) {                                                     // 1698\n        var duration = moment.duration(posNegDuration).abs(),                                                          // 1699\n            seconds = round(duration.as('s')),                                                                         // 1700\n            minutes = round(duration.as('m')),                                                                         // 1701\n            hours = round(duration.as('h')),                                                                           // 1702\n            days = round(duration.as('d')),                                                                            // 1703\n            months = round(duration.as('M')),                                                                          // 1704\n            years = round(duration.as('y')),                                                                           // 1705\n                                                                                                                       // 1706\n            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||                                             // 1707\n                minutes === 1 && ['m'] ||                                                                              // 1708\n                minutes < relativeTimeThresholds.m && ['mm', minutes] ||                                               // 1709\n                hours === 1 && ['h'] ||                                                                                // 1710\n                hours < relativeTimeThresholds.h && ['hh', hours] ||                                                   // 1711\n                days === 1 && ['d'] ||                                                                                 // 1712\n                days < relativeTimeThresholds.d && ['dd', days] ||                                                     // 1713\n                months === 1 && ['M'] ||                                                                               // 1714\n                months < relativeTimeThresholds.M && ['MM', months] ||                                                 // 1715\n                years === 1 && ['y'] || ['yy', years];                                                                 // 1716\n                                                                                                                       // 1717\n        args[2] = withoutSuffix;                                                                                       // 1718\n        args[3] = +posNegDuration > 0;                                                                                 // 1719\n        args[4] = locale;                                                                                              // 1720\n        return substituteTimeAgo.apply({}, args);                                                                      // 1721\n    }                                                                                                                  // 1722\n                                                                                                                       // 1723\n                                                                                                                       // 1724\n    /************************************                                                                              // 1725\n        Week of Year                                                                                                   // 1726\n    ************************************/                                                                              // 1727\n                                                                                                                       // 1728\n                                                                                                                       // 1729\n    // firstDayOfWeek       0 = sun, 6 = sat                                                                           // 1730\n    //                      the day of the week that starts the week                                                   // 1731\n    //                      (usually sunday or monday)                                                                 // 1732\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat                                                                           // 1733\n    //                      the first week is the week that contains the first                                         // 1734\n    //                      of this day of the week                                                                    // 1735\n    //                      (eg. ISO weeks use thursday (4))                                                           // 1736\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {                                                   // 1737\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,                                                               // 1738\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),                                                        // 1739\n            adjustedMoment;                                                                                            // 1740\n                                                                                                                       // 1741\n                                                                                                                       // 1742\n        if (daysToDayOfWeek > end) {                                                                                   // 1743\n            daysToDayOfWeek -= 7;                                                                                      // 1744\n        }                                                                                                              // 1745\n                                                                                                                       // 1746\n        if (daysToDayOfWeek < end - 7) {                                                                               // 1747\n            daysToDayOfWeek += 7;                                                                                      // 1748\n        }                                                                                                              // 1749\n                                                                                                                       // 1750\n        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');                                                        // 1751\n        return {                                                                                                       // 1752\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),                                                           // 1753\n            year: adjustedMoment.year()                                                                                // 1754\n        };                                                                                                             // 1755\n    }                                                                                                                  // 1756\n                                                                                                                       // 1757\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1758\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {                           // 1759\n        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;                                             // 1760\n                                                                                                                       // 1761\n        d = d === 0 ? 7 : d;                                                                                           // 1762\n        weekday = weekday != null ? weekday : firstDayOfWeek;                                                          // 1763\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);            // 1764\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;                                       // 1765\n                                                                                                                       // 1766\n        return {                                                                                                       // 1767\n            year: dayOfYear > 0 ? year : year - 1,                                                                     // 1768\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear                                   // 1769\n        };                                                                                                             // 1770\n    }                                                                                                                  // 1771\n                                                                                                                       // 1772\n    /************************************                                                                              // 1773\n        Top Level Functions                                                                                            // 1774\n    ************************************/                                                                              // 1775\n                                                                                                                       // 1776\n    function makeMoment(config) {                                                                                      // 1777\n        var input = config._i,                                                                                         // 1778\n            format = config._f,                                                                                        // 1779\n            res;                                                                                                       // 1780\n                                                                                                                       // 1781\n        config._locale = config._locale || moment.localeData(config._l);                                               // 1782\n                                                                                                                       // 1783\n        if (input === null || (format === undefined && input === '')) {                                                // 1784\n            return moment.invalid({nullInput: true});                                                                  // 1785\n        }                                                                                                              // 1786\n                                                                                                                       // 1787\n        if (typeof input === 'string') {                                                                               // 1788\n            config._i = input = config._locale.preparse(input);                                                        // 1789\n        }                                                                                                              // 1790\n                                                                                                                       // 1791\n        if (moment.isMoment(input)) {                                                                                  // 1792\n            return new Moment(input, true);                                                                            // 1793\n        } else if (format) {                                                                                           // 1794\n            if (isArray(format)) {                                                                                     // 1795\n                makeDateFromStringAndArray(config);                                                                    // 1796\n            } else {                                                                                                   // 1797\n                makeDateFromStringAndFormat(config);                                                                   // 1798\n            }                                                                                                          // 1799\n        } else {                                                                                                       // 1800\n            makeDateFromInput(config);                                                                                 // 1801\n        }                                                                                                              // 1802\n                                                                                                                       // 1803\n        res = new Moment(config);                                                                                      // 1804\n        if (res._nextDay) {                                                                                            // 1805\n            // Adding is smart enough around DST                                                                       // 1806\n            res.add(1, 'd');                                                                                           // 1807\n            res._nextDay = undefined;                                                                                  // 1808\n        }                                                                                                              // 1809\n                                                                                                                       // 1810\n        return res;                                                                                                    // 1811\n    }                                                                                                                  // 1812\n                                                                                                                       // 1813\n    moment = function (input, format, locale, strict) {                                                                // 1814\n        var c;                                                                                                         // 1815\n                                                                                                                       // 1816\n        if (typeof(locale) === 'boolean') {                                                                            // 1817\n            strict = locale;                                                                                           // 1818\n            locale = undefined;                                                                                        // 1819\n        }                                                                                                              // 1820\n        // object construction must be done this way.                                                                  // 1821\n        // https://github.com/moment/moment/issues/1423                                                                // 1822\n        c = {};                                                                                                        // 1823\n        c._isAMomentObject = true;                                                                                     // 1824\n        c._i = input;                                                                                                  // 1825\n        c._f = format;                                                                                                 // 1826\n        c._l = locale;                                                                                                 // 1827\n        c._strict = strict;                                                                                            // 1828\n        c._isUTC = false;                                                                                              // 1829\n        c._pf = defaultParsingFlags();                                                                                 // 1830\n                                                                                                                       // 1831\n        return makeMoment(c);                                                                                          // 1832\n    };                                                                                                                 // 1833\n                                                                                                                       // 1834\n    moment.suppressDeprecationWarnings = false;                                                                        // 1835\n                                                                                                                       // 1836\n    moment.createFromInputFallback = deprecate(                                                                        // 1837\n        'moment construction falls back to js Date. This is ' +                                                        // 1838\n        'discouraged and will be removed in upcoming major ' +                                                         // 1839\n        'release. Please refer to ' +                                                                                  // 1840\n        'https://github.com/moment/moment/issues/1407 for more info.',                                                 // 1841\n        function (config) {                                                                                            // 1842\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                          // 1843\n        }                                                                                                              // 1844\n    );                                                                                                                 // 1845\n                                                                                                                       // 1846\n    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 1847\n    // other. This relies on the function fn to be transitive.                                                         // 1848\n    //                                                                                                                 // 1849\n    // moments should either be an array of moment objects or an array, whose                                          // 1850\n    // first element is an array of moment objects.                                                                    // 1851\n    function pickBy(fn, moments) {                                                                                     // 1852\n        var res, i;                                                                                                    // 1853\n        if (moments.length === 1 && isArray(moments[0])) {                                                             // 1854\n            moments = moments[0];                                                                                      // 1855\n        }                                                                                                              // 1856\n        if (!moments.length) {                                                                                         // 1857\n            return moment();                                                                                           // 1858\n        }                                                                                                              // 1859\n        res = moments[0];                                                                                              // 1860\n        for (i = 1; i < moments.length; ++i) {                                                                         // 1861\n            if (moments[i][fn](res)) {                                                                                 // 1862\n                res = moments[i];                                                                                      // 1863\n            }                                                                                                          // 1864\n        }                                                                                                              // 1865\n        return res;                                                                                                    // 1866\n    }                                                                                                                  // 1867\n                                                                                                                       // 1868\n    moment.min = function () {                                                                                         // 1869\n        var args = [].slice.call(arguments, 0);                                                                        // 1870\n                                                                                                                       // 1871\n        return pickBy('isBefore', args);                                                                               // 1872\n    };                                                                                                                 // 1873\n                                                                                                                       // 1874\n    moment.max = function () {                                                                                         // 1875\n        var args = [].slice.call(arguments, 0);                                                                        // 1876\n                                                                                                                       // 1877\n        return pickBy('isAfter', args);                                                                                // 1878\n    };                                                                                                                 // 1879\n                                                                                                                       // 1880\n    // creating with utc                                                                                               // 1881\n    moment.utc = function (input, format, locale, strict) {                                                            // 1882\n        var c;                                                                                                         // 1883\n                                                                                                                       // 1884\n        if (typeof(locale) === 'boolean') {                                                                            // 1885\n            strict = locale;                                                                                           // 1886\n            locale = undefined;                                                                                        // 1887\n        }                                                                                                              // 1888\n        // object construction must be done this way.                                                                  // 1889\n        // https://github.com/moment/moment/issues/1423                                                                // 1890\n        c = {};                                                                                                        // 1891\n        c._isAMomentObject = true;                                                                                     // 1892\n        c._useUTC = true;                                                                                              // 1893\n        c._isUTC = true;                                                                                               // 1894\n        c._l = locale;                                                                                                 // 1895\n        c._i = input;                                                                                                  // 1896\n        c._f = format;                                                                                                 // 1897\n        c._strict = strict;                                                                                            // 1898\n        c._pf = defaultParsingFlags();                                                                                 // 1899\n                                                                                                                       // 1900\n        return makeMoment(c).utc();                                                                                    // 1901\n    };                                                                                                                 // 1902\n                                                                                                                       // 1903\n    // creating with unix timestamp (in seconds)                                                                       // 1904\n    moment.unix = function (input) {                                                                                   // 1905\n        return moment(input * 1000);                                                                                   // 1906\n    };                                                                                                                 // 1907\n                                                                                                                       // 1908\n    // duration                                                                                                        // 1909\n    moment.duration = function (input, key) {                                                                          // 1910\n        var duration = input,                                                                                          // 1911\n            // matching against regexp is expensive, do it on demand                                                   // 1912\n            match = null,                                                                                              // 1913\n            sign,                                                                                                      // 1914\n            ret,                                                                                                       // 1915\n            parseIso,                                                                                                  // 1916\n            diffRes;                                                                                                   // 1917\n                                                                                                                       // 1918\n        if (moment.isDuration(input)) {                                                                                // 1919\n            duration = {                                                                                               // 1920\n                ms: input._milliseconds,                                                                               // 1921\n                d: input._days,                                                                                        // 1922\n                M: input._months                                                                                       // 1923\n            };                                                                                                         // 1924\n        } else if (typeof input === 'number') {                                                                        // 1925\n            duration = {};                                                                                             // 1926\n            if (key) {                                                                                                 // 1927\n                duration[key] = input;                                                                                 // 1928\n            } else {                                                                                                   // 1929\n                duration.milliseconds = input;                                                                         // 1930\n            }                                                                                                          // 1931\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {                                                  // 1932\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1933\n            duration = {                                                                                               // 1934\n                y: 0,                                                                                                  // 1935\n                d: toInt(match[DATE]) * sign,                                                                          // 1936\n                h: toInt(match[HOUR]) * sign,                                                                          // 1937\n                m: toInt(match[MINUTE]) * sign,                                                                        // 1938\n                s: toInt(match[SECOND]) * sign,                                                                        // 1939\n                ms: toInt(match[MILLISECOND]) * sign                                                                   // 1940\n            };                                                                                                         // 1941\n        } else if (!!(match = isoDurationRegex.exec(input))) {                                                         // 1942\n            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1943\n            parseIso = function (inp) {                                                                                // 1944\n                // We'd normally use ~~inp for this, but unfortunately it also                                         // 1945\n                // converts floats to ints.                                                                            // 1946\n                // inp may be undefined, so careful calling replace on it.                                             // 1947\n                var res = inp && parseFloat(inp.replace(',', '.'));                                                    // 1948\n                // apply sign while we're at it                                                                        // 1949\n                return (isNaN(res) ? 0 : res) * sign;                                                                  // 1950\n            };                                                                                                         // 1951\n            duration = {                                                                                               // 1952\n                y: parseIso(match[2]),                                                                                 // 1953\n                M: parseIso(match[3]),                                                                                 // 1954\n                d: parseIso(match[4]),                                                                                 // 1955\n                h: parseIso(match[5]),                                                                                 // 1956\n                m: parseIso(match[6]),                                                                                 // 1957\n                s: parseIso(match[7]),                                                                                 // 1958\n                w: parseIso(match[8])                                                                                  // 1959\n            };                                                                                                         // 1960\n        } else if (typeof duration === 'object' &&                                                                     // 1961\n                ('from' in duration || 'to' in duration)) {                                                            // 1962\n            diffRes = momentsDifference(moment(duration.from), moment(duration.to));                                   // 1963\n                                                                                                                       // 1964\n            duration = {};                                                                                             // 1965\n            duration.ms = diffRes.milliseconds;                                                                        // 1966\n            duration.M = diffRes.months;                                                                               // 1967\n        }                                                                                                              // 1968\n                                                                                                                       // 1969\n        ret = new Duration(duration);                                                                                  // 1970\n                                                                                                                       // 1971\n        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {                                                // 1972\n            ret._locale = input._locale;                                                                               // 1973\n        }                                                                                                              // 1974\n                                                                                                                       // 1975\n        return ret;                                                                                                    // 1976\n    };                                                                                                                 // 1977\n                                                                                                                       // 1978\n    // version number                                                                                                  // 1979\n    moment.version = VERSION;                                                                                          // 1980\n                                                                                                                       // 1981\n    // default format                                                                                                  // 1982\n    moment.defaultFormat = isoFormat;                                                                                  // 1983\n                                                                                                                       // 1984\n    // constant that refers to the ISO standard                                                                        // 1985\n    moment.ISO_8601 = function () {};                                                                                  // 1986\n                                                                                                                       // 1987\n    // Plugins that add properties should also add the key here (null value),                                          // 1988\n    // so we can properly clone ourselves.                                                                             // 1989\n    moment.momentProperties = momentProperties;                                                                        // 1990\n                                                                                                                       // 1991\n    // This function will be called whenever a moment is mutated.                                                      // 1992\n    // It is intended to keep the offset in sync with the timezone.                                                    // 1993\n    moment.updateOffset = function () {};                                                                              // 1994\n                                                                                                                       // 1995\n    // This function allows you to set a threshold for relative time strings                                           // 1996\n    moment.relativeTimeThreshold = function (threshold, limit) {                                                       // 1997\n        if (relativeTimeThresholds[threshold] === undefined) {                                                         // 1998\n            return false;                                                                                              // 1999\n        }                                                                                                              // 2000\n        if (limit === undefined) {                                                                                     // 2001\n            return relativeTimeThresholds[threshold];                                                                  // 2002\n        }                                                                                                              // 2003\n        relativeTimeThresholds[threshold] = limit;                                                                     // 2004\n        return true;                                                                                                   // 2005\n    };                                                                                                                 // 2006\n                                                                                                                       // 2007\n    moment.lang = deprecate(                                                                                           // 2008\n        'moment.lang is deprecated. Use moment.locale instead.',                                                       // 2009\n        function (key, value) {                                                                                        // 2010\n            return moment.locale(key, value);                                                                          // 2011\n        }                                                                                                              // 2012\n    );                                                                                                                 // 2013\n                                                                                                                       // 2014\n    // This function will load locale and then set the global locale.  If                                              // 2015\n    // no arguments are passed in, it will simply return the current global                                            // 2016\n    // locale key.                                                                                                     // 2017\n    moment.locale = function (key, values) {                                                                           // 2018\n        var data;                                                                                                      // 2019\n        if (key) {                                                                                                     // 2020\n            if (typeof(values) !== 'undefined') {                                                                      // 2021\n                data = moment.defineLocale(key, values);                                                               // 2022\n            }                                                                                                          // 2023\n            else {                                                                                                     // 2024\n                data = moment.localeData(key);                                                                         // 2025\n            }                                                                                                          // 2026\n                                                                                                                       // 2027\n            if (data) {                                                                                                // 2028\n                moment.duration._locale = moment._locale = data;                                                       // 2029\n            }                                                                                                          // 2030\n        }                                                                                                              // 2031\n                                                                                                                       // 2032\n        return moment._locale._abbr;                                                                                   // 2033\n    };                                                                                                                 // 2034\n                                                                                                                       // 2035\n    moment.defineLocale = function (name, values) {                                                                    // 2036\n        if (values !== null) {                                                                                         // 2037\n            values.abbr = name;                                                                                        // 2038\n            if (!locales[name]) {                                                                                      // 2039\n                locales[name] = new Locale();                                                                          // 2040\n            }                                                                                                          // 2041\n            locales[name].set(values);                                                                                 // 2042\n                                                                                                                       // 2043\n            // backwards compat for now: also set the locale                                                           // 2044\n            moment.locale(name);                                                                                       // 2045\n                                                                                                                       // 2046\n            return locales[name];                                                                                      // 2047\n        } else {                                                                                                       // 2048\n            // useful for testing                                                                                      // 2049\n            delete locales[name];                                                                                      // 2050\n            return null;                                                                                               // 2051\n        }                                                                                                              // 2052\n    };                                                                                                                 // 2053\n                                                                                                                       // 2054\n    moment.langData = deprecate(                                                                                       // 2055\n        'moment.langData is deprecated. Use moment.localeData instead.',                                               // 2056\n        function (key) {                                                                                               // 2057\n            return moment.localeData(key);                                                                             // 2058\n        }                                                                                                              // 2059\n    );                                                                                                                 // 2060\n                                                                                                                       // 2061\n    // returns locale data                                                                                             // 2062\n    moment.localeData = function (key) {                                                                               // 2063\n        var locale;                                                                                                    // 2064\n                                                                                                                       // 2065\n        if (key && key._locale && key._locale._abbr) {                                                                 // 2066\n            key = key._locale._abbr;                                                                                   // 2067\n        }                                                                                                              // 2068\n                                                                                                                       // 2069\n        if (!key) {                                                                                                    // 2070\n            return moment._locale;                                                                                     // 2071\n        }                                                                                                              // 2072\n                                                                                                                       // 2073\n        if (!isArray(key)) {                                                                                           // 2074\n            //short-circuit everything else                                                                            // 2075\n            locale = loadLocale(key);                                                                                  // 2076\n            if (locale) {                                                                                              // 2077\n                return locale;                                                                                         // 2078\n            }                                                                                                          // 2079\n            key = [key];                                                                                               // 2080\n        }                                                                                                              // 2081\n                                                                                                                       // 2082\n        return chooseLocale(key);                                                                                      // 2083\n    };                                                                                                                 // 2084\n                                                                                                                       // 2085\n    // compare moment object                                                                                           // 2086\n    moment.isMoment = function (obj) {                                                                                 // 2087\n        return obj instanceof Moment ||                                                                                // 2088\n            (obj != null && hasOwnProp(obj, '_isAMomentObject'));                                                      // 2089\n    };                                                                                                                 // 2090\n                                                                                                                       // 2091\n    // for typechecking Duration objects                                                                               // 2092\n    moment.isDuration = function (obj) {                                                                               // 2093\n        return obj instanceof Duration;                                                                                // 2094\n    };                                                                                                                 // 2095\n                                                                                                                       // 2096\n    for (i = lists.length - 1; i >= 0; --i) {                                                                          // 2097\n        makeList(lists[i]);                                                                                            // 2098\n    }                                                                                                                  // 2099\n                                                                                                                       // 2100\n    moment.normalizeUnits = function (units) {                                                                         // 2101\n        return normalizeUnits(units);                                                                                  // 2102\n    };                                                                                                                 // 2103\n                                                                                                                       // 2104\n    moment.invalid = function (flags) {                                                                                // 2105\n        var m = moment.utc(NaN);                                                                                       // 2106\n        if (flags != null) {                                                                                           // 2107\n            extend(m._pf, flags);                                                                                      // 2108\n        }                                                                                                              // 2109\n        else {                                                                                                         // 2110\n            m._pf.userInvalidated = true;                                                                              // 2111\n        }                                                                                                              // 2112\n                                                                                                                       // 2113\n        return m;                                                                                                      // 2114\n    };                                                                                                                 // 2115\n                                                                                                                       // 2116\n    moment.parseZone = function () {                                                                                   // 2117\n        return moment.apply(null, arguments).parseZone();                                                              // 2118\n    };                                                                                                                 // 2119\n                                                                                                                       // 2120\n    moment.parseTwoDigitYear = function (input) {                                                                      // 2121\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 2122\n    };                                                                                                                 // 2123\n                                                                                                                       // 2124\n    /************************************                                                                              // 2125\n        Moment Prototype                                                                                               // 2126\n    ************************************/                                                                              // 2127\n                                                                                                                       // 2128\n                                                                                                                       // 2129\n    extend(moment.fn = Moment.prototype, {                                                                             // 2130\n                                                                                                                       // 2131\n        clone : function () {                                                                                          // 2132\n            return moment(this);                                                                                       // 2133\n        },                                                                                                             // 2134\n                                                                                                                       // 2135\n        valueOf : function () {                                                                                        // 2136\n            return +this._d + ((this._offset || 0) * 60000);                                                           // 2137\n        },                                                                                                             // 2138\n                                                                                                                       // 2139\n        unix : function () {                                                                                           // 2140\n            return Math.floor(+this / 1000);                                                                           // 2141\n        },                                                                                                             // 2142\n                                                                                                                       // 2143\n        toString : function () {                                                                                       // 2144\n            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                               // 2145\n        },                                                                                                             // 2146\n                                                                                                                       // 2147\n        toDate : function () {                                                                                         // 2148\n            return this._offset ? new Date(+this) : this._d;                                                           // 2149\n        },                                                                                                             // 2150\n                                                                                                                       // 2151\n        toISOString : function () {                                                                                    // 2152\n            var m = moment(this).utc();                                                                                // 2153\n            if (0 < m.year() && m.year() <= 9999) {                                                                    // 2154\n                if ('function' === typeof Date.prototype.toISOString) {                                                // 2155\n                    // native implementation is ~50x faster, use it when we can                                        // 2156\n                    return this.toDate().toISOString();                                                                // 2157\n                } else {                                                                                               // 2158\n                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                            // 2159\n                }                                                                                                      // 2160\n            } else {                                                                                                   // 2161\n                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                              // 2162\n            }                                                                                                          // 2163\n        },                                                                                                             // 2164\n                                                                                                                       // 2165\n        toArray : function () {                                                                                        // 2166\n            var m = this;                                                                                              // 2167\n            return [                                                                                                   // 2168\n                m.year(),                                                                                              // 2169\n                m.month(),                                                                                             // 2170\n                m.date(),                                                                                              // 2171\n                m.hours(),                                                                                             // 2172\n                m.minutes(),                                                                                           // 2173\n                m.seconds(),                                                                                           // 2174\n                m.milliseconds()                                                                                       // 2175\n            ];                                                                                                         // 2176\n        },                                                                                                             // 2177\n                                                                                                                       // 2178\n        isValid : function () {                                                                                        // 2179\n            return isValid(this);                                                                                      // 2180\n        },                                                                                                             // 2181\n                                                                                                                       // 2182\n        isDSTShifted : function () {                                                                                   // 2183\n            if (this._a) {                                                                                             // 2184\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }                                                                                                          // 2186\n                                                                                                                       // 2187\n            return false;                                                                                              // 2188\n        },                                                                                                             // 2189\n                                                                                                                       // 2190\n        parsingFlags : function () {                                                                                   // 2191\n            return extend({}, this._pf);                                                                               // 2192\n        },                                                                                                             // 2193\n                                                                                                                       // 2194\n        invalidAt: function () {                                                                                       // 2195\n            return this._pf.overflow;                                                                                  // 2196\n        },                                                                                                             // 2197\n                                                                                                                       // 2198\n        utc : function (keepLocalTime) {                                                                               // 2199\n            return this.zone(0, keepLocalTime);                                                                        // 2200\n        },                                                                                                             // 2201\n                                                                                                                       // 2202\n        local : function (keepLocalTime) {                                                                             // 2203\n            if (this._isUTC) {                                                                                         // 2204\n                this.zone(0, keepLocalTime);                                                                           // 2205\n                this._isUTC = false;                                                                                   // 2206\n                                                                                                                       // 2207\n                if (keepLocalTime) {                                                                                   // 2208\n                    this.add(this._dateTzOffset(), 'm');                                                               // 2209\n                }                                                                                                      // 2210\n            }                                                                                                          // 2211\n            return this;                                                                                               // 2212\n        },                                                                                                             // 2213\n                                                                                                                       // 2214\n        format : function (inputString) {                                                                              // 2215\n            var output = formatMoment(this, inputString || moment.defaultFormat);                                      // 2216\n            return this.localeData().postformat(output);                                                               // 2217\n        },                                                                                                             // 2218\n                                                                                                                       // 2219\n        add : createAdder(1, 'add'),                                                                                   // 2220\n                                                                                                                       // 2221\n        subtract : createAdder(-1, 'subtract'),                                                                        // 2222\n                                                                                                                       // 2223\n        diff : function (input, units, asFloat) {                                                                      // 2224\n            var that = makeAs(input, this),                                                                            // 2225\n                zoneDiff = (this.zone() - that.zone()) * 6e4,                                                          // 2226\n                diff, output, daysAdjust;                                                                              // 2227\n                                                                                                                       // 2228\n            units = normalizeUnits(units);                                                                             // 2229\n                                                                                                                       // 2230\n            if (units === 'year' || units === 'month') {                                                               // 2231\n                // average number of days in the months in the given dates                                             // 2232\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2                   // 2233\n                // difference in months                                                                                // 2234\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());                           // 2235\n                // adjust by taking difference in days, average number of days                                         // 2236\n                // and dst in the given months.                                                                        // 2237\n                daysAdjust = (this - moment(this).startOf('month')) -                                                  // 2238\n                    (that - moment(that).startOf('month'));                                                            // 2239\n                // same as above but with zones, to negate all dst                                                     // 2240\n                daysAdjust -= ((this.zone() - moment(this).startOf('month').zone()) -                                  // 2241\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4;                                   // 2242\n                output += daysAdjust / diff;                                                                           // 2243\n                if (units === 'year') {                                                                                // 2244\n                    output = output / 12;                                                                              // 2245\n                }                                                                                                      // 2246\n            } else {                                                                                                   // 2247\n                diff = (this - that);                                                                                  // 2248\n                output = units === 'second' ? diff / 1e3 : // 1000                                                     // 2249\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60                                                     // 2250\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60                                                 // 2251\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                   // 2252\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst             // 2253\n                    diff;                                                                                              // 2254\n            }                                                                                                          // 2255\n            return asFloat ? output : absRound(output);                                                                // 2256\n        },                                                                                                             // 2257\n                                                                                                                       // 2258\n        from : function (time, withoutSuffix) {                                                                        // 2259\n            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);             // 2260\n        },                                                                                                             // 2261\n                                                                                                                       // 2262\n        fromNow : function (withoutSuffix) {                                                                           // 2263\n            return this.from(moment(), withoutSuffix);                                                                 // 2264\n        },                                                                                                             // 2265\n                                                                                                                       // 2266\n        calendar : function (time) {                                                                                   // 2267\n            // We want to compare the start of today, vs this.                                                         // 2268\n            // Getting start-of-today depends on whether we're zone'd or not.                                          // 2269\n            var now = time || moment(),                                                                                // 2270\n                sod = makeAs(now, this).startOf('day'),                                                                // 2271\n                diff = this.diff(sod, 'days', true),                                                                   // 2272\n                format = diff < -6 ? 'sameElse' :                                                                      // 2273\n                    diff < -1 ? 'lastWeek' :                                                                           // 2274\n                    diff < 0 ? 'lastDay' :                                                                             // 2275\n                    diff < 1 ? 'sameDay' :                                                                             // 2276\n                    diff < 2 ? 'nextDay' :                                                                             // 2277\n                    diff < 7 ? 'nextWeek' : 'sameElse';                                                                // 2278\n            return this.format(this.localeData().calendar(format, this, moment(now)));                                 // 2279\n        },                                                                                                             // 2280\n                                                                                                                       // 2281\n        isLeapYear : function () {                                                                                     // 2282\n            return isLeapYear(this.year());                                                                            // 2283\n        },                                                                                                             // 2284\n                                                                                                                       // 2285\n        isDST : function () {                                                                                          // 2286\n            return (this.zone() < this.clone().month(0).zone() ||                                                      // 2287\n                this.zone() < this.clone().month(5).zone());                                                           // 2288\n        },                                                                                                             // 2289\n                                                                                                                       // 2290\n        day : function (input) {                                                                                       // 2291\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                            // 2292\n            if (input != null) {                                                                                       // 2293\n                input = parseWeekday(input, this.localeData());                                                        // 2294\n                return this.add(input - day, 'd');                                                                     // 2295\n            } else {                                                                                                   // 2296\n                return day;                                                                                            // 2297\n            }                                                                                                          // 2298\n        },                                                                                                             // 2299\n                                                                                                                       // 2300\n        month : makeAccessor('Month', true),                                                                           // 2301\n                                                                                                                       // 2302\n        startOf : function (units) {                                                                                   // 2303\n            units = normalizeUnits(units);                                                                             // 2304\n            // the following switch intentionally omits break keywords                                                 // 2305\n            // to utilize falling through the cases.                                                                   // 2306\n            switch (units) {                                                                                           // 2307\n            case 'year':                                                                                               // 2308\n                this.month(0);                                                                                         // 2309\n                /* falls through */                                                                                    // 2310\n            case 'quarter':                                                                                            // 2311\n            case 'month':                                                                                              // 2312\n                this.date(1);                                                                                          // 2313\n                /* falls through */                                                                                    // 2314\n            case 'week':                                                                                               // 2315\n            case 'isoWeek':                                                                                            // 2316\n            case 'day':                                                                                                // 2317\n                this.hours(0);                                                                                         // 2318\n                /* falls through */                                                                                    // 2319\n            case 'hour':                                                                                               // 2320\n                this.minutes(0);                                                                                       // 2321\n                /* falls through */                                                                                    // 2322\n            case 'minute':                                                                                             // 2323\n                this.seconds(0);                                                                                       // 2324\n                /* falls through */                                                                                    // 2325\n            case 'second':                                                                                             // 2326\n                this.milliseconds(0);                                                                                  // 2327\n                /* falls through */                                                                                    // 2328\n            }                                                                                                          // 2329\n                                                                                                                       // 2330\n            // weeks are a special case                                                                                // 2331\n            if (units === 'week') {                                                                                    // 2332\n                this.weekday(0);                                                                                       // 2333\n            } else if (units === 'isoWeek') {                                                                          // 2334\n                this.isoWeekday(1);                                                                                    // 2335\n            }                                                                                                          // 2336\n                                                                                                                       // 2337\n            // quarters are also special                                                                               // 2338\n            if (units === 'quarter') {                                                                                 // 2339\n                this.month(Math.floor(this.month() / 3) * 3);                                                          // 2340\n            }                                                                                                          // 2341\n                                                                                                                       // 2342\n            return this;                                                                                               // 2343\n        },                                                                                                             // 2344\n                                                                                                                       // 2345\n        endOf: function (units) {                                                                                      // 2346\n            units = normalizeUnits(units);                                                                             // 2347\n            if (units === undefined || units === 'millisecond') {                                                      // 2348\n                return this;                                                                                           // 2349\n            }                                                                                                          // 2350\n            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');               // 2351\n        },                                                                                                             // 2352\n                                                                                                                       // 2353\n        isAfter: function (input, units) {                                                                             // 2354\n            var inputMs;                                                                                               // 2355\n            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                              // 2356\n            if (units === 'millisecond') {                                                                             // 2357\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2358\n                return +this > +input;                                                                                 // 2359\n            } else {                                                                                                   // 2360\n                inputMs = moment.isMoment(input) ? +input : +moment(input);                                            // 2361\n                return inputMs < +this.clone().startOf(units);                                                         // 2362\n            }                                                                                                          // 2363\n        },                                                                                                             // 2364\n                                                                                                                       // 2365\n        isBefore: function (input, units) {                                                                            // 2366\n            var inputMs;                                                                                               // 2367\n            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');                              // 2368\n            if (units === 'millisecond') {                                                                             // 2369\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2370\n                return +this < +input;                                                                                 // 2371\n            } else {                                                                                                   // 2372\n                inputMs = moment.isMoment(input) ? +input : +moment(input);                                            // 2373\n                return +this.clone().endOf(units) < inputMs;                                                           // 2374\n            }                                                                                                          // 2375\n        },                                                                                                             // 2376\n                                                                                                                       // 2377\n        isSame: function (input, units) {                                                                              // 2378\n            var inputMs;                                                                                               // 2379\n            units = normalizeUnits(units || 'millisecond');                                                            // 2380\n            if (units === 'millisecond') {                                                                             // 2381\n                input = moment.isMoment(input) ? input : moment(input);                                                // 2382\n                return +this === +input;                                                                               // 2383\n            } else {                                                                                                   // 2384\n                inputMs = +moment(input);                                                                              // 2385\n                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));           // 2386\n            }                                                                                                          // 2387\n        },                                                                                                             // 2388\n                                                                                                                       // 2389\n        min: deprecate(                                                                                                // 2390\n                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',   // 2391\n                 function (other) {                                                                                    // 2392\n                     other = moment.apply(null, arguments);                                                            // 2393\n                     return other < this ? this : other;                                                               // 2394\n                 }                                                                                                     // 2395\n         ),                                                                                                            // 2396\n                                                                                                                       // 2397\n        max: deprecate(                                                                                                // 2398\n                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',    // 2399\n                function (other) {                                                                                     // 2400\n                    other = moment.apply(null, arguments);                                                             // 2401\n                    return other > this ? this : other;                                                                // 2402\n                }                                                                                                      // 2403\n        ),                                                                                                             // 2404\n                                                                                                                       // 2405\n        // keepLocalTime = true means only change the timezone, without                                                // 2406\n        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->                                             // 2407\n        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone                                            // 2408\n        // +0200, so we adjust the time as needed, to be valid.                                                        // 2409\n        //                                                                                                             // 2410\n        // Keeping the time actually adds/subtracts (one hour)                                                         // 2411\n        // from the actual represented time. That is why we call updateOffset                                          // 2412\n        // a second time. In case it wants us to change the offset again                                               // 2413\n        // _changeInProgress == true case, then we have to adjust, because                                             // 2414\n        // there is no such time in the given timezone.                                                                // 2415\n        zone : function (input, keepLocalTime) {                                                                       // 2416\n            var offset = this._offset || 0,                                                                            // 2417\n                localAdjust;                                                                                           // 2418\n            if (input != null) {                                                                                       // 2419\n                if (typeof input === 'string') {                                                                       // 2420\n                    input = timezoneMinutesFromString(input);                                                          // 2421\n                }                                                                                                      // 2422\n                if (Math.abs(input) < 16) {                                                                            // 2423\n                    input = input * 60;                                                                                // 2424\n                }                                                                                                      // 2425\n                if (!this._isUTC && keepLocalTime) {                                                                   // 2426\n                    localAdjust = this._dateTzOffset();                                                                // 2427\n                }                                                                                                      // 2428\n                this._offset = input;                                                                                  // 2429\n                this._isUTC = true;                                                                                    // 2430\n                if (localAdjust != null) {                                                                             // 2431\n                    this.subtract(localAdjust, 'm');                                                                   // 2432\n                }                                                                                                      // 2433\n                if (offset !== input) {                                                                                // 2434\n                    if (!keepLocalTime || this._changeInProgress) {                                                    // 2435\n                        addOrSubtractDurationFromMoment(this,                                                          // 2436\n                                moment.duration(offset - input, 'm'), 1, false);                                       // 2437\n                    } else if (!this._changeInProgress) {                                                              // 2438\n                        this._changeInProgress = true;                                                                 // 2439\n                        moment.updateOffset(this, true);                                                               // 2440\n                        this._changeInProgress = null;                                                                 // 2441\n                    }                                                                                                  // 2442\n                }                                                                                                      // 2443\n            } else {                                                                                                   // 2444\n                return this._isUTC ? offset : this._dateTzOffset();                                                    // 2445\n            }                                                                                                          // 2446\n            return this;                                                                                               // 2447\n        },                                                                                                             // 2448\n                                                                                                                       // 2449\n        zoneAbbr : function () {                                                                                       // 2450\n            return this._isUTC ? 'UTC' : '';                                                                           // 2451\n        },                                                                                                             // 2452\n                                                                                                                       // 2453\n        zoneName : function () {                                                                                       // 2454\n            return this._isUTC ? 'Coordinated Universal Time' : '';                                                    // 2455\n        },                                                                                                             // 2456\n                                                                                                                       // 2457\n        parseZone : function () {                                                                                      // 2458\n            if (this._tzm) {                                                                                           // 2459\n                this.zone(this._tzm);                                                                                  // 2460\n            } else if (typeof this._i === 'string') {                                                                  // 2461\n                this.zone(this._i);                                                                                    // 2462\n            }                                                                                                          // 2463\n            return this;                                                                                               // 2464\n        },                                                                                                             // 2465\n                                                                                                                       // 2466\n        hasAlignedHourOffset : function (input) {                                                                      // 2467\n            if (!input) {                                                                                              // 2468\n                input = 0;                                                                                             // 2469\n            }                                                                                                          // 2470\n            else {                                                                                                     // 2471\n                input = moment(input).zone();                                                                          // 2472\n            }                                                                                                          // 2473\n                                                                                                                       // 2474\n            return (this.zone() - input) % 60 === 0;                                                                   // 2475\n        },                                                                                                             // 2476\n                                                                                                                       // 2477\n        daysInMonth : function () {                                                                                    // 2478\n            return daysInMonth(this.year(), this.month());                                                             // 2479\n        },                                                                                                             // 2480\n                                                                                                                       // 2481\n        dayOfYear : function (input) {                                                                                 // 2482\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;           // 2483\n            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                     // 2484\n        },                                                                                                             // 2485\n                                                                                                                       // 2486\n        quarter : function (input) {                                                                                   // 2487\n            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3); // 2488\n        },                                                                                                             // 2489\n                                                                                                                       // 2490\n        weekYear : function (input) {                                                                                  // 2491\n            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;                // 2492\n            return input == null ? year : this.add((input - year), 'y');                                               // 2493\n        },                                                                                                             // 2494\n                                                                                                                       // 2495\n        isoWeekYear : function (input) {                                                                               // 2496\n            var year = weekOfYear(this, 1, 4).year;                                                                    // 2497\n            return input == null ? year : this.add((input - year), 'y');                                               // 2498\n        },                                                                                                             // 2499\n                                                                                                                       // 2500\n        week : function (input) {                                                                                      // 2501\n            var week = this.localeData().week(this);                                                                   // 2502\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2503\n        },                                                                                                             // 2504\n                                                                                                                       // 2505\n        isoWeek : function (input) {                                                                                   // 2506\n            var week = weekOfYear(this, 1, 4).week;                                                                    // 2507\n            return input == null ? week : this.add((input - week) * 7, 'd');                                           // 2508\n        },                                                                                                             // 2509\n                                                                                                                       // 2510\n        weekday : function (input) {                                                                                   // 2511\n            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                          // 2512\n            return input == null ? weekday : this.add(input - weekday, 'd');                                           // 2513\n        },                                                                                                             // 2514\n                                                                                                                       // 2515\n        isoWeekday : function (input) {                                                                                // 2516\n            // behaves the same as moment#day except                                                                   // 2517\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                          // 2518\n            // as a setter, sunday should belong to the previous week.                                                 // 2519\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                     // 2520\n        },                                                                                                             // 2521\n                                                                                                                       // 2522\n        isoWeeksInYear : function () {                                                                                 // 2523\n            return weeksInYear(this.year(), 1, 4);                                                                     // 2524\n        },                                                                                                             // 2525\n                                                                                                                       // 2526\n        weeksInYear : function () {                                                                                    // 2527\n            var weekInfo = this.localeData()._week;                                                                    // 2528\n            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                               // 2529\n        },                                                                                                             // 2530\n                                                                                                                       // 2531\n        get : function (units) {                                                                                       // 2532\n            units = normalizeUnits(units);                                                                             // 2533\n            return this[units]();                                                                                      // 2534\n        },                                                                                                             // 2535\n                                                                                                                       // 2536\n        set : function (units, value) {                                                                                // 2537\n            units = normalizeUnits(units);                                                                             // 2538\n            if (typeof this[units] === 'function') {                                                                   // 2539\n                this[units](value);                                                                                    // 2540\n            }                                                                                                          // 2541\n            return this;                                                                                               // 2542\n        },                                                                                                             // 2543\n                                                                                                                       // 2544\n        // If passed a locale key, it will set the locale for this                                                     // 2545\n        // instance.  Otherwise, it will return the locale configuration                                               // 2546\n        // variables for this instance.                                                                                // 2547\n        locale : function (key) {                                                                                      // 2548\n            var newLocaleData;                                                                                         // 2549\n                                                                                                                       // 2550\n            if (key === undefined) {                                                                                   // 2551\n                return this._locale._abbr;                                                                             // 2552\n            } else {                                                                                                   // 2553\n                newLocaleData = moment.localeData(key);                                                                // 2554\n                if (newLocaleData != null) {                                                                           // 2555\n                    this._locale = newLocaleData;                                                                      // 2556\n                }                                                                                                      // 2557\n                return this;                                                                                           // 2558\n            }                                                                                                          // 2559\n        },                                                                                                             // 2560\n                                                                                                                       // 2561\n        lang : deprecate(                                                                                              // 2562\n            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n            function (key) {                                                                                           // 2564\n                if (key === undefined) {                                                                               // 2565\n                    return this.localeData();                                                                          // 2566\n                } else {                                                                                               // 2567\n                    return this.locale(key);                                                                           // 2568\n                }                                                                                                      // 2569\n            }                                                                                                          // 2570\n        ),                                                                                                             // 2571\n                                                                                                                       // 2572\n        localeData : function () {                                                                                     // 2573\n            return this._locale;                                                                                       // 2574\n        },                                                                                                             // 2575\n                                                                                                                       // 2576\n        _dateTzOffset : function () {                                                                                  // 2577\n            // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                          // 2578\n            // https://github.com/moment/moment/pull/1871                                                              // 2579\n            return Math.round(this._d.getTimezoneOffset() / 15) * 15;                                                  // 2580\n        }                                                                                                              // 2581\n    });                                                                                                                // 2582\n                                                                                                                       // 2583\n    function rawMonthSetter(mom, value) {                                                                              // 2584\n        var dayOfMonth;                                                                                                // 2585\n                                                                                                                       // 2586\n        // TODO: Move this out of here!                                                                                // 2587\n        if (typeof value === 'string') {                                                                               // 2588\n            value = mom.localeData().monthsParse(value);                                                               // 2589\n            // TODO: Another silent failure?                                                                           // 2590\n            if (typeof value !== 'number') {                                                                           // 2591\n                return mom;                                                                                            // 2592\n            }                                                                                                          // 2593\n        }                                                                                                              // 2594\n                                                                                                                       // 2595\n        dayOfMonth = Math.min(mom.date(),                                                                              // 2596\n                daysInMonth(mom.year(), value));                                                                       // 2597\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 2598\n        return mom;                                                                                                    // 2599\n    }                                                                                                                  // 2600\n                                                                                                                       // 2601\n    function rawGetter(mom, unit) {                                                                                    // 2602\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();                                                     // 2603\n    }                                                                                                                  // 2604\n                                                                                                                       // 2605\n    function rawSetter(mom, unit, value) {                                                                             // 2606\n        if (unit === 'Month') {                                                                                        // 2607\n            return rawMonthSetter(mom, value);                                                                         // 2608\n        } else {                                                                                                       // 2609\n            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                            // 2610\n        }                                                                                                              // 2611\n    }                                                                                                                  // 2612\n                                                                                                                       // 2613\n    function makeAccessor(unit, keepTime) {                                                                            // 2614\n        return function (value) {                                                                                      // 2615\n            if (value != null) {                                                                                       // 2616\n                rawSetter(this, unit, value);                                                                          // 2617\n                moment.updateOffset(this, keepTime);                                                                   // 2618\n                return this;                                                                                           // 2619\n            } else {                                                                                                   // 2620\n                return rawGetter(this, unit);                                                                          // 2621\n            }                                                                                                          // 2622\n        };                                                                                                             // 2623\n    }                                                                                                                  // 2624\n                                                                                                                       // 2625\n    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);                              // 2626\n    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);                                             // 2627\n    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);                                             // 2628\n    // Setting the hour should keep the time, because the user explicitly                                              // 2629\n    // specified which hour he wants. So trying to maintain the same hour (in                                          // 2630\n    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 2631\n    // this rule.                                                                                                      // 2632\n    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);                                                    // 2633\n    // moment.fn.month is defined separately                                                                           // 2634\n    moment.fn.date = makeAccessor('Date', true);                                                                       // 2635\n    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));        // 2636\n    moment.fn.year = makeAccessor('FullYear', true);                                                                   // 2637\n    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));    // 2638\n                                                                                                                       // 2639\n    // add plural methods                                                                                              // 2640\n    moment.fn.days = moment.fn.day;                                                                                    // 2641\n    moment.fn.months = moment.fn.month;                                                                                // 2642\n    moment.fn.weeks = moment.fn.week;                                                                                  // 2643\n    moment.fn.isoWeeks = moment.fn.isoWeek;                                                                            // 2644\n    moment.fn.quarters = moment.fn.quarter;                                                                            // 2645\n                                                                                                                       // 2646\n    // add aliased format methods                                                                                      // 2647\n    moment.fn.toJSON = moment.fn.toISOString;                                                                          // 2648\n                                                                                                                       // 2649\n    /************************************                                                                              // 2650\n        Duration Prototype                                                                                             // 2651\n    ************************************/                                                                              // 2652\n                                                                                                                       // 2653\n                                                                                                                       // 2654\n    function daysToYears (days) {                                                                                      // 2655\n        // 400 years have 146097 days (taking into account leap year rules)                                            // 2656\n        return days * 400 / 146097;                                                                                    // 2657\n    }                                                                                                                  // 2658\n                                                                                                                       // 2659\n    function yearsToDays (years) {                                                                                     // 2660\n        // years * 365 + absRound(years / 4) -                                                                         // 2661\n        //     absRound(years / 100) + absRound(years / 400);                                                          // 2662\n        return years * 146097 / 400;                                                                                   // 2663\n    }                                                                                                                  // 2664\n                                                                                                                       // 2665\n    extend(moment.duration.fn = Duration.prototype, {                                                                  // 2666\n                                                                                                                       // 2667\n        _bubble : function () {                                                                                        // 2668\n            var milliseconds = this._milliseconds,                                                                     // 2669\n                days = this._days,                                                                                     // 2670\n                months = this._months,                                                                                 // 2671\n                data = this._data,                                                                                     // 2672\n                seconds, minutes, hours, years = 0;                                                                    // 2673\n                                                                                                                       // 2674\n            // The following code bubbles up values, see the tests for                                                 // 2675\n            // examples of what that means.                                                                            // 2676\n            data.milliseconds = milliseconds % 1000;                                                                   // 2677\n                                                                                                                       // 2678\n            seconds = absRound(milliseconds / 1000);                                                                   // 2679\n            data.seconds = seconds % 60;                                                                               // 2680\n                                                                                                                       // 2681\n            minutes = absRound(seconds / 60);                                                                          // 2682\n            data.minutes = minutes % 60;                                                                               // 2683\n                                                                                                                       // 2684\n            hours = absRound(minutes / 60);                                                                            // 2685\n            data.hours = hours % 24;                                                                                   // 2686\n                                                                                                                       // 2687\n            days += absRound(hours / 24);                                                                              // 2688\n                                                                                                                       // 2689\n            // Accurately convert days to years, assume start from year 0.                                             // 2690\n            years = absRound(daysToYears(days));                                                                       // 2691\n            days -= absRound(yearsToDays(years));                                                                      // 2692\n                                                                                                                       // 2693\n            // 30 days to a month                                                                                      // 2694\n            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.                                          // 2695\n            months += absRound(days / 30);                                                                             // 2696\n            days %= 30;                                                                                                // 2697\n                                                                                                                       // 2698\n            // 12 months -> 1 year                                                                                     // 2699\n            years += absRound(months / 12);                                                                            // 2700\n            months %= 12;                                                                                              // 2701\n                                                                                                                       // 2702\n            data.days = days;                                                                                          // 2703\n            data.months = months;                                                                                      // 2704\n            data.years = years;                                                                                        // 2705\n        },                                                                                                             // 2706\n                                                                                                                       // 2707\n        abs : function () {                                                                                            // 2708\n            this._milliseconds = Math.abs(this._milliseconds);                                                         // 2709\n            this._days = Math.abs(this._days);                                                                         // 2710\n            this._months = Math.abs(this._months);                                                                     // 2711\n                                                                                                                       // 2712\n            this._data.milliseconds = Math.abs(this._data.milliseconds);                                               // 2713\n            this._data.seconds = Math.abs(this._data.seconds);                                                         // 2714\n            this._data.minutes = Math.abs(this._data.minutes);                                                         // 2715\n            this._data.hours = Math.abs(this._data.hours);                                                             // 2716\n            this._data.months = Math.abs(this._data.months);                                                           // 2717\n            this._data.years = Math.abs(this._data.years);                                                             // 2718\n                                                                                                                       // 2719\n            return this;                                                                                               // 2720\n        },                                                                                                             // 2721\n                                                                                                                       // 2722\n        weeks : function () {                                                                                          // 2723\n            return absRound(this.days() / 7);                                                                          // 2724\n        },                                                                                                             // 2725\n                                                                                                                       // 2726\n        valueOf : function () {                                                                                        // 2727\n            return this._milliseconds +                                                                                // 2728\n              this._days * 864e5 +                                                                                     // 2729\n              (this._months % 12) * 2592e6 +                                                                           // 2730\n              toInt(this._months / 12) * 31536e6;                                                                      // 2731\n        },                                                                                                             // 2732\n                                                                                                                       // 2733\n        humanize : function (withSuffix) {                                                                             // 2734\n            var output = relativeTime(this, !withSuffix, this.localeData());                                           // 2735\n                                                                                                                       // 2736\n            if (withSuffix) {                                                                                          // 2737\n                output = this.localeData().pastFuture(+this, output);                                                  // 2738\n            }                                                                                                          // 2739\n                                                                                                                       // 2740\n            return this.localeData().postformat(output);                                                               // 2741\n        },                                                                                                             // 2742\n                                                                                                                       // 2743\n        add : function (input, val) {                                                                                  // 2744\n            // supports only 2.0-style add(1, 's') or add(moment)                                                      // 2745\n            var dur = moment.duration(input, val);                                                                     // 2746\n                                                                                                                       // 2747\n            this._milliseconds += dur._milliseconds;                                                                   // 2748\n            this._days += dur._days;                                                                                   // 2749\n            this._months += dur._months;                                                                               // 2750\n                                                                                                                       // 2751\n            this._bubble();                                                                                            // 2752\n                                                                                                                       // 2753\n            return this;                                                                                               // 2754\n        },                                                                                                             // 2755\n                                                                                                                       // 2756\n        subtract : function (input, val) {                                                                             // 2757\n            var dur = moment.duration(input, val);                                                                     // 2758\n                                                                                                                       // 2759\n            this._milliseconds -= dur._milliseconds;                                                                   // 2760\n            this._days -= dur._days;                                                                                   // 2761\n            this._months -= dur._months;                                                                               // 2762\n                                                                                                                       // 2763\n            this._bubble();                                                                                            // 2764\n                                                                                                                       // 2765\n            return this;                                                                                               // 2766\n        },                                                                                                             // 2767\n                                                                                                                       // 2768\n        get : function (units) {                                                                                       // 2769\n            units = normalizeUnits(units);                                                                             // 2770\n            return this[units.toLowerCase() + 's']();                                                                  // 2771\n        },                                                                                                             // 2772\n                                                                                                                       // 2773\n        as : function (units) {                                                                                        // 2774\n            var days, months;                                                                                          // 2775\n            units = normalizeUnits(units);                                                                             // 2776\n                                                                                                                       // 2777\n            if (units === 'month' || units === 'year') {                                                               // 2778\n                days = this._days + this._milliseconds / 864e5;                                                        // 2779\n                months = this._months + daysToYears(days) * 12;                                                        // 2780\n                return units === 'month' ? months : months / 12;                                                       // 2781\n            } else {                                                                                                   // 2782\n                // handle milliseconds separately because of floating point math errors (issue #1867)                  // 2783\n                days = this._days + Math.round(yearsToDays(this._months / 12));                                        // 2784\n                switch (units) {                                                                                       // 2785\n                    case 'week': return days / 7 + this._milliseconds / 6048e5;                                        // 2786\n                    case 'day': return days + this._milliseconds / 864e5;                                              // 2787\n                    case 'hour': return days * 24 + this._milliseconds / 36e5;                                         // 2788\n                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;                                   // 2789\n                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;                             // 2790\n                    // Math.floor prevents floating point math errors here                                             // 2791\n                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;            // 2792\n                    default: throw new Error('Unknown unit ' + units);                                                 // 2793\n                }                                                                                                      // 2794\n            }                                                                                                          // 2795\n        },                                                                                                             // 2796\n                                                                                                                       // 2797\n        lang : moment.fn.lang,                                                                                         // 2798\n        locale : moment.fn.locale,                                                                                     // 2799\n                                                                                                                       // 2800\n        toIsoString : deprecate(                                                                                       // 2801\n            'toIsoString() is deprecated. Please use toISOString() instead ' +                                         // 2802\n            '(notice the capitals)',                                                                                   // 2803\n            function () {                                                                                              // 2804\n                return this.toISOString();                                                                             // 2805\n            }                                                                                                          // 2806\n        ),                                                                                                             // 2807\n                                                                                                                       // 2808\n        toISOString : function () {                                                                                    // 2809\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js            // 2810\n            var years = Math.abs(this.years()),                                                                        // 2811\n                months = Math.abs(this.months()),                                                                      // 2812\n                days = Math.abs(this.days()),                                                                          // 2813\n                hours = Math.abs(this.hours()),                                                                        // 2814\n                minutes = Math.abs(this.minutes()),                                                                    // 2815\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);                                       // 2816\n                                                                                                                       // 2817\n            if (!this.asSeconds()) {                                                                                   // 2818\n                // this is the same as C#'s (Noda) and python (isodate)...                                             // 2819\n                // but not other JS (goog.date)                                                                        // 2820\n                return 'P0D';                                                                                          // 2821\n            }                                                                                                          // 2822\n                                                                                                                       // 2823\n            return (this.asSeconds() < 0 ? '-' : '') +                                                                 // 2824\n                'P' +                                                                                                  // 2825\n                (years ? years + 'Y' : '') +                                                                           // 2826\n                (months ? months + 'M' : '') +                                                                         // 2827\n                (days ? days + 'D' : '') +                                                                             // 2828\n                ((hours || minutes || seconds) ? 'T' : '') +                                                           // 2829\n                (hours ? hours + 'H' : '') +                                                                           // 2830\n                (minutes ? minutes + 'M' : '') +                                                                       // 2831\n                (seconds ? seconds + 'S' : '');                                                                        // 2832\n        },                                                                                                             // 2833\n                                                                                                                       // 2834\n        localeData : function () {                                                                                     // 2835\n            return this._locale;                                                                                       // 2836\n        }                                                                                                              // 2837\n    });                                                                                                                // 2838\n                                                                                                                       // 2839\n    moment.duration.fn.toString = moment.duration.fn.toISOString;                                                      // 2840\n                                                                                                                       // 2841\n    function makeDurationGetter(name) {                                                                                // 2842\n        moment.duration.fn[name] = function () {                                                                       // 2843\n            return this._data[name];                                                                                   // 2844\n        };                                                                                                             // 2845\n    }                                                                                                                  // 2846\n                                                                                                                       // 2847\n    for (i in unitMillisecondFactors) {                                                                                // 2848\n        if (hasOwnProp(unitMillisecondFactors, i)) {                                                                   // 2849\n            makeDurationGetter(i.toLowerCase());                                                                       // 2850\n        }                                                                                                              // 2851\n    }                                                                                                                  // 2852\n                                                                                                                       // 2853\n    moment.duration.fn.asMilliseconds = function () {                                                                  // 2854\n        return this.as('ms');                                                                                          // 2855\n    };                                                                                                                 // 2856\n    moment.duration.fn.asSeconds = function () {                                                                       // 2857\n        return this.as('s');                                                                                           // 2858\n    };                                                                                                                 // 2859\n    moment.duration.fn.asMinutes = function () {                                                                       // 2860\n        return this.as('m');                                                                                           // 2861\n    };                                                                                                                 // 2862\n    moment.duration.fn.asHours = function () {                                                                         // 2863\n        return this.as('h');                                                                                           // 2864\n    };                                                                                                                 // 2865\n    moment.duration.fn.asDays = function () {                                                                          // 2866\n        return this.as('d');                                                                                           // 2867\n    };                                                                                                                 // 2868\n    moment.duration.fn.asWeeks = function () {                                                                         // 2869\n        return this.as('weeks');                                                                                       // 2870\n    };                                                                                                                 // 2871\n    moment.duration.fn.asMonths = function () {                                                                        // 2872\n        return this.as('M');                                                                                           // 2873\n    };                                                                                                                 // 2874\n    moment.duration.fn.asYears = function () {                                                                         // 2875\n        return this.as('y');                                                                                           // 2876\n    };                                                                                                                 // 2877\n                                                                                                                       // 2878\n    /************************************                                                                              // 2879\n        Default Locale                                                                                                 // 2880\n    ************************************/                                                                              // 2881\n                                                                                                                       // 2882\n                                                                                                                       // 2883\n    // Set default locale, other locale will inherit from English.                                                     // 2884\n    moment.locale('en', {                                                                                              // 2885\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                          // 2886\n        ordinal : function (number) {                                                                                  // 2887\n            var b = number % 10,                                                                                       // 2888\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 2889\n                (b === 1) ? 'st' :                                                                                     // 2890\n                (b === 2) ? 'nd' :                                                                                     // 2891\n                (b === 3) ? 'rd' : 'th';                                                                               // 2892\n            return number + output;                                                                                    // 2893\n        }                                                                                                              // 2894\n    });                                                                                                                // 2895\n                                                                                                                       // 2896\n    /* EMBED_LOCALES */                                                                                                // 2897\n                                                                                                                       // 2898\n    /************************************                                                                              // 2899\n        Exposing Moment                                                                                                // 2900\n    ************************************/                                                                              // 2901\n                                                                                                                       // 2902\n    function makeGlobal(shouldDeprecate) {                                                                             // 2903\n        /*global ender:false */                                                                                        // 2904\n        if (typeof ender !== 'undefined') {                                                                            // 2905\n            return;                                                                                                    // 2906\n        }                                                                                                              // 2907\n        oldGlobalMoment = globalScope.moment;                                                                          // 2908\n        if (shouldDeprecate) {                                                                                         // 2909\n            globalScope.moment = deprecate(                                                                            // 2910\n                    'Accessing Moment through the global scope is ' +                                                  // 2911\n                    'deprecated, and will be removed in an upcoming ' +                                                // 2912\n                    'release.',                                                                                        // 2913\n                    moment);                                                                                           // 2914\n        } else {                                                                                                       // 2915\n            globalScope.moment = moment;                                                                               // 2916\n        }                                                                                                              // 2917\n    }                                                                                                                  // 2918\n                                                                                                                       // 2919\n    // CommonJS module is defined                                                                                      // 2920\n    if (hasModule) {                                                                                                   // 2921\n        module.exports = moment;                                                                                       // 2922\n    } else if (typeof define === 'function' && define.amd) {                                                           // 2923\n        define('moment', function (require, exports, module) {                                                         // 2924\n            if (module.config && module.config() && module.config().noGlobal === true) {                               // 2925\n                // release the global variable                                                                         // 2926\n                globalScope.moment = oldGlobalMoment;                                                                  // 2927\n            }                                                                                                          // 2928\n                                                                                                                       // 2929\n            return moment;                                                                                             // 2930\n        });                                                                                                            // 2931\n        makeGlobal(true);                                                                                              // 2932\n    } else {                                                                                                           // 2933\n        makeGlobal();                                                                                                  // 2934\n    }                                                                                                                  // 2935\n}).call(this);                                                                                                         // 2936\n                                                                                                                       // 2937\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/momentjs:moment/meteor/export.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                  // 2\ndelete this.moment;                                                                                                    // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}